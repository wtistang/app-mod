{"componentChunkName":"component---src-pages-labs-day-2-operation-labs-d-20100-istio-index-mdx","path":"/labs/day2operation-labs/d20100-istio/","result":{"pageContext":{"frontmatter":{"title":"Istio Introduction","description":null},"relativePagePath":"/labs/day2operation-labs/d20100-istio/index.mdx","titleType":"page","MdxNode":{"id":"88cc546a-be01-5973-a8bb-159fd1fbae95","children":[],"parent":"3210eae9-8ac8-5938-b545-515e54b927df","internal":{"content":"---\ntitle: Istio Introduction\ndescription: \n---\nThe goal of this session is to provide a hands-on experience with Red Hat OpenShift Service Mesh\n\n### 1. Introduction\n\nIstio is an open-source project for integrating and managing traffic flow across services. It works in concert with an underlying cluster manager (like Kubernetes). Centralized components, sidecar proxies, and node agents work together to create the data and control planes over a distributed application. With Istio, You can manage network traffic, load balance across microservices, enforce access policies, verify service identity, secure service communication and observe what exactly is going on with your services.\n\nBased Istio project, Red Hat OpenShift Service Mesh adds a transparent layer on existing distributed applications without requiring any changes to the service code. You add Red Hat OpenShift Service Mesh support to services by deploying a special sidecar proxy to relevant services in the mesh that intercepts all network communication between microservices. You configure and manage the Service Mesh using the control plane features.\n\nIn this lab, you can see how to install Istio alongside microservices for a simple mock app called **Guestbook**. When you deploy Guestbook's microservices into an OpenShift Container Platform (OCP) cluster where Istio is installed, you can choose to inject the Istio Envoy sidecar proxies in the pods of certain microservices.\n\n### 2. Objective\n\nThe objectives of this lab are to help you to learn how to:\n\n* download and install Istio in your cluster\n* deploy the Guestbook sample app\n* use metrics, logging and tracing to observe services\n* set up the Istio Ingress Gateway\n* perform simple traffic management, such as A/B tests and canary deployments\n* secure your service mesh\n* enforce policies for your microservices\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tInstall Red Hat OpenShift Service Mesh\n* Deploy the BookInfo application on Service Mesh\n* Expose the app with the Istio Ingress Gateway and Route\n* Observe service telemetry: metrics and tracing\n* Perform traffic management\n* Secure your services\n* Enable SSL for traffic coming in to your cluster (HTTPS)\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/cn0200st** directory and click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-cn0200st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n  \n#### 6.2 Install Red Hat OpenShift Service Mesh\n\nTo install Red Hat OpenShift Service Mesh, first install the required Operators on OpenShift Container Platform and then create a ServiceMeshControlPlane resource to deploy the control plane.\n\nRed Hat OpenShift Service Mesh requires the following four Operators:\n  * OpenShift Elasticsearch - (Optional) Provides database storage for tracing and logging with Jaeger. It is based on the open source Elasticsearch project.\n  * Jaeger - Provides tracing to monitor and troubleshoot transactions in complex distributed systems. It is based on the open source Jaeger project.\n  * Kiali - Provides observability for your service mesh. Allows you to view configurations, monitor traffic, and analyze traces in a single console. It is based on the open source Kiali project.\n  * Red Hat OpenShift Service Mesh - Allows you to connect, secure, control, and observe the microservices that comprise your applications. The Service Mesh Operator defines and monitors the ServiceMeshControlPlane resources that manage the deployment, updating, and deletion of the Service Mesh components. It is based on the open source Istio project.\n\nIn this lab environment, these operators are alrady installed in the OCP cluster, you need to deploy a basic installation of the ServiceMeshControlPlane through OCP web console to complete the OpenShift Service Mesh installation.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the Could Native Toolkit **Developer Dashboard** bookmark to open it.\n\n  ![](images/ocp-console-bookmark.png) \n  \n3. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The OCP web console Overview page is displayed. \n  \n  ![](images/ocp-console-overview-page.png)\n  \n4. View the installed operators by selecting **Operators**>**Installed Operators** and then selecting **all projects** scope.\n\n  ![](images/istio-installed-operators.png)\n\n5. Scroll through the installed operator list, you can see that these four required operators, including OpenShift Elasticsearch, Jaeger, Kiali and Red Hat OpenShift Service Mesh, are installed\n\n  To deploy a ServiceMeshControlPlane, you need to cerate a new project. The ServiceMeshControlPlane resource must be installed in a project that is separate from your microservices and Operators. This lab uses **istio-system** project as an example, but you can deploy your control plane in any project as long as it is separate from the project that contains your services.\n\n6. Click **Projects**>**Create Project**.\n\n  ![](images/ocp-create-project.png)\n\n7. Enter Name and Display Name as: **istio-system** and click **Create**.\n\n   ![](images/istio-create-project.png)\n\n   The **istio-system** project is created.\n\n8. Navigate to **Operators**>**Installed Operators** .under the **istio-system** scope.\n\n  ![](images/istio-installed-operators-project.png)\n\n9. Click the **Red Hat OpenShift Service Mesh Operator**.\n\n  ![](images/istio-mesh-operator-link.png)\n\n10. Click **Istio Service Mesh Control Plane** tab.\n\n  ![](images/istio-mesh-controlplan-link.png)\n\n11. On the **Istio Service Mesh Control Plane** tab, click **Create ServiceMeshControlPlane**.\n\n  ![](images/istio-create-mesh-controlplan.png)\n\n12. On the **Create ServiceMeshControlPlane** page, accept the default control plane version to take advantage of the features available in the most current version of the product and click **Create**. \n\n  The Operator creates pods, services, and Service Mesh control plane components based on your configuration parameters. When it is done, you see something like this:\n\n  ![](images/istio-mesh-controlplan-installed.png)\n  \n13. To verify the control plane installed correctly, click the name of the new control plane.\n\n  ![](images/istio-created-mesh-controlplan-link.png)\n\n14. Click the **Resources** tab to see the Red Hat OpenShift Service Mesh control plane resources the Operator created and configured.\n\n  To complete the installation, you need to create a **ServiceMeshMemberRoll**. ServiceMeshMemberRoll resource is used to specify the projects/namespaces associated with the Service Mesh. \n15. Navigate to **Operators** > **Installed Operators** again, then click **Red Hat OpenShift Service Mesh**.\n16. Click **Istio Service Mesh Member Roll** tab and click **Create ServiceMeshMemberRoll**.\n\n  ![](images/istio-mesh-member-roll-tab.png)\n\n17. Enter **bookinfo** as the first value, click **Remove Member** to delete the second value and click **Create**.\n\n  ![](images/istio-create-mesh-member.png)\n\nYou successfully installed Istio into your cluster.\n\n#### 6.3 Deploy the BookInfo application on Service Mesh\n\nThe BookInfo application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews.\n\nThe Bookinfo application is broken into four separate microservices:\n  * productpage. The productpage microservice calls the details and reviews microservices to populate the page.\n  * details. The details microservice contains book information.\n  * reviews. The reviews microservice contains book reviews. It also calls the ratings microservice.\n  * ratings. The ratings microservice contains book ranking information that accompanies a book review.\n\nThere are 3 versions of the reviews microservice:\n  * Version v1 doesn’t call the ratings service.\n  * Version v2 calls the ratings service, and displays each rating as 1 to 5 black stars.\n  * Version v3 calls the ratings service, and displays each rating as 1 to 5 red stars.\n\nThe end-to-end architecture of the application is shown below.\n\n![](images/istio-bookinfo-diagram.png)\n\nRed Hat OpenShift Service Mesh relies on the Envoy sidecars within the application’s pod to provide Service Mesh capabilities to the application. You can enable automatic sidecar injection or manage it manually. Automatic injection using the annotation is the recommended way.\n\n1. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n\n2. Navigate to **/home/ibmdemo/app-mod-labs/cn0200st** directory.\n\n  ```\n  cd /home/ibmdemo/app-mod-labs/cn0200st/ \n  ```\n3. List the contents in the directory.\n\n  ```\n  ls -l\n  ```\n\n  Sample output:\n  ```\n  total 8\n  drwxrwxr-x 7 ibmdemo ibmdemo 4096 Jul 17 07:03 bookinfo\n  -rw-rw-r-- 1 ibmdemo ibmdemo  296 Jun 26  2020 Commands.txt\n  ```\n  The **bookinfo** directory contains the artifacts you are going to use to deploy the application with the service mesh.\n  \n4. Next issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  Sample output:\n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n  ```\n6. Create a new project called **bookinfo**.\n\n  ```\n  oc new-project bookinfo\n  ```\n  \n  Sample output:\n  ```\n  Now using project \"bookinfo\" on server \"https://api.demo.ibmdte.net:6443\".\n\n  You can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app rails-postgresql-example\n\n  to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n  ```\n  In OpenShift, a project is a Kubernetes namespace with additional annotations.\n\n7. Deploy the **Bookinfo** application in the **bookinfo** project by applying the **bookinfo.yaml** file on to the OpenShift cluster. This deploys both the v1 and v2 versions of the app.\n\n  ```\n  oc apply -f bookinfo/platform/kube/bookinfo.yaml\n  ```\n  \n  The bookinfo.yaml file is annotated sidecar.istio.io/inject: \"true\" to enable automatic injection of the Istio sidecar for Red Hat OpenShift Service Mesh. So, these pods will also include an Envoy sidecar as they are started in the cluster.\n  \n  Sample output:\n  ```\n  service/details created\n  serviceaccount/bookinfo-details created\n  deployment.apps/details-v1 created\n  service/ratings created\n  serviceaccount/bookinfo-ratings created\n  deployment.apps/ratings-v1 created\n  service/reviews created\n  serviceaccount/bookinfo-reviews created\n  deployment.apps/reviews-v1 created\n  deployment.apps/reviews-v2 created\n  deployment.apps/reviews-v3 created\n  service/productpage created\n  serviceaccount/bookinfo-productpage created\n  deployment.apps/productpage-v1 created\n  ```\n\nNote: An installation of Red Hat OpenShift Service Mesh differs from upstream Istio community installations in multiple ways. Refer this link comparing Service Mesh and Istio. By default, Istio injects the sidecar if you have labeled the project istio-injection=enabled. Red Hat OpenShift Service Mesh handles this differently and requires you to opt in to having the sidecar automatically injected to a deployment, so you are not required to label the project. This avoids injecting a sidecar if it is not wanted (for example, in build or deploy pods).\n\n8. Verify that the pods are up and running.\n\n  ```\n  oc get pods\n  ```\n  \n  Sample output:\n\n  ```\n  NAME                              READY     STATUS    RESTARTS   AGE\n  details-v1-789c5f58f4-9twtw       2/2       Running   0          4m12s\n  productpage-v1-856c8cc5d8-xcx2q   2/2       Running   0          4m11s\n  ratings-v1-5786768978-tr8z9       2/2       Running   0          4m12s\n  reviews-v1-5874566865-mxfgm       2/2       Running   0          4m12s\n  reviews-v2-86865fc7d9-mf6t4       2/2       Running   0          4m12s\n  reviews-v3-8d4cbbbbf-rfjcz        2/2       Running   0          4m12s\n  ```\n  Note that each bookinfo pods has 2 containers in it. One is the bookinfo container, and the other is the Envoy proxy sidecar.\n\n  Your bookinfo app is running, but you can't access it as the service is not yet configured to receive external traffic. In the next section, you will expose the productpage service to allow incoming traffic.\n\n#### 6.4 Expose the app with the Istio Ingress Gateway and Route\n\nThe components deployed on the service mesh by default are not exposed outside the cluster. External access to individual services so far has been provided by creating an external load balancer or node port on each service.\n\nAn Ingress Gateway resource can be created to allow external requests through the Istio Ingress Gateway to the backing services.\n\n1. Configure the **bookinfo** default route with the Istio Ingress Gateway.\n\n  ```\n  oc create -f bookinfo/networking/bookinfo-gateway.yaml\n  ```\n  \n  Sample output:\n  \n  ```\n  gateway.networking.istio.io/bookinfo-gateway created\n  virtualservice.networking.istio.io/bookinfo created\n  ```\n2. Get the ROUTE of the Istio Ingress Gateway.\n\n  ```\n  oc get routes -n istio-system istio-ingressgateway\n  ```\n\n  Sample output:\n\n  ```\n  NAME                   HOST/PORT                                                PATH   SERVICES               PORT   TERMINATION   WILDCARD\n  istio-ingressgateway   istio-ingressgateway-istio-system.apps.demo.ibmdte.net          istio-ingressgateway   8080                 None\n  ```\n\n3. Save the HOST address that you retrieved in the previous step, as it will be used to access the **BookInfo** app in later parts of the tutorial. \n\n4. Create an environment variable called **$INGRESS_HOST** with your HOST address.\n\n  ```\n  export INGRESS_HOST=istio-ingressgateway-istio-system.apps.demo.ibmdte.net\n  ```\n\n5. Visit the application by going to http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage in a new web borswer window. If you keep hitting Refresh, you should see different versions of the page in random order (v1 - no stars, v2 - black stars, v3 - red stars).\n\n  ![](images/istio-bookinfo-productpage.png)\n\n#### 6.4 Observe service telemetry: metrics and tracing\n\n\nIstio's tracing and metrics features are designed to provide broad and granular insight into the health of all services. Istio's role as a service mesh makes it the ideal data source for observability information, particularly in a microservices environment. As requests pass through multiple services, identifying performance bottlenecks becomes increasingly difficult using traditional debugging techniques. Distributed tracing provides a holistic view of requests transiting through multiple services, allowing for immediate identification of latency issues. With Istio, distributed tracing comes by default. This will expose latency, retry, and failure information for each hop in a request.\n\n##### 6.4.1 Visualize Metrics with Grafana\n\nGrafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under the **istio-system** project scope.\n\n  ![](images/istio-istio-system-route.png)\n\n2. Click the URL(Location) next to **grafana** to open the Grafana dashboard in a new browser window.\n\n  ![](images/istio-grafana-route.png)\n\n3. If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n4. Click **Log In with OpenShift**.\n\n  ![](images/istio-login-with-openshift.png)\n\n5. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n6. If you see the **Authorize Access** page, click **Allow selected permissions**.\n\n  ![](images/istio-authorize-access.png)\n\n  The Grafana Home Dashboard is displayed. \n\n7. Click the Dashboard menu in the left navigation panel, select the **Manage**.\n\n  ![](images/istio-grafana-manage.png)\n\n8. Select **Istio** and **Istio Service Dashboard**.\n\n  ![](images/istio-service-dashboard.png)\n\n9. Select **productpage.bookinfo.svc.cluster.local** in the Service drop down.\n\n  ![](images/istio-service-dashboard-productpage.png)\n\n10. From the terminal window, generate a small load to the app by sending traffic to the Ingress host location you set in the last section.\n\n  ```\n  for i in {1..20}; do sleep 0.5; curl -I $INGRESS_HOST/productpage; done\n  ```\n\n11. Go back to the Grafana dashboard to see the results\n\n  ![](images/istio-productpage-dashboard.png)\n  \n  This Grafana dashboard provides metrics for each workload. Explore the other dashboards provided as well.\n\n##### 6.4.2 Observe your Service mesh with Kiali\n\nKiali is an open-source project that installs as an add-on on top of Istio to visualize your service mesh. Kiali provides deeper insight into how your microservices interact with one another, and provides features such as circuit breakers and request rates for your services.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under the **istio-system** project scope.\n2. Click the URL(Location) next to **kiali** to open the Grafana dashboard in a new browser window.\n\n  ![](images/istio-kiali-route.png)\n\n3. If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n4. Click **Log In with OpenShift**.\n5. Click the **Graph** on the left pane and select the **bookinfo** and **istio-system** namespaces from the top bar to see the visual **Versioned app graph** of the various services in your Istio mesh.\n\n  ![](images/istio-kiali-graph.png) \n6. To see the request rates, click **Display** and choose **Requests Per second**.\n\n  ![](images/istio-kiali-display-settings.png) \n7. In a different browser tab/window, visit the **BookInfo** application URL and refresh the page multiple times to generate some load, or run the load script in the previous section to generate load.\n8. Now, check the Kiali Graph to see the requests per second.\n\n  ![](images/istio-kiali-display.png)    \n\n  Kiali has a number of views to help you visualize your services. Click through the various tabs to explore the service graph, and the various views for workloads, applications and services.\n\n#### 6.5 Perform traffic management\n\n\nIstio’s traffic routing rules let you easily control the flow of traffic and API calls between services. Istio simplifies configuration of service-level properties like circuit breakers, timeouts, and retries, and makes it easy to set up important tasks like A/B testing, canary rollouts, and staged rollouts with percentage-based traffic splits. It also provides out-of-box failure recovery features that help make your application more robust against failures of dependent services or the network.\n\nIstio’s traffic management model relies on the Envoy proxies (sidecars) that are deployed along with your services. All traffic that your services send and receive (data plane traffic) is proxied through Envoy, making it easy to direct and control traffic around your mesh without making any changes to your services.\n\nPilot translates high-level rules into low-level configurations and distributes this config to Envoy instances. Pilot uses three types of configuration resources to manage traffic within its service mesh: Virtual Services, Destination Rules, and Service Entries.\n\n#### 6.5.1 A/B testing with Istio\n\nA/B testing is a method of performing identical tests against two separate service versions in order to determine which performs better. To prevent Istio from performing the default routing behavior between the original and modernized service, define the following rules:\n\n1. Run the following command to create default destination rules for the Bookinfo services,\n\n  ```\n  oc create -f bookinfo/networking/destination-rule-all.yaml\n  ```\n  \n  Sample output:\n  ```\n  destinationrule.networking.istio.io/productpage created\n  destinationrule.networking.istio.io/reviews created\n  destinationrule.networking.istio.io/ratings created\n  destinationrule.networking.istio.io/details created\n  ```\n  Note: A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred. These rules specify configuration for load balancing, connection pool size from the sidecar, and outlier detection settings to detect and evict unhealthy hosts from the load balancing pool. Any destination host and subset referenced in a VirtualService rule must be defined in a corresponding DestinationRule.\n\n2. A VirtualService defines a set of traffic routing rules to apply when a host is addressed. Each routing rule defines matching criteria for traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service (or subset/version of it) defined in the registry. Run the below command to send all reviews traffic to v1\n\n  ```\n  oc create -f bookinfo/networking/virtual-service-all-v1.yaml\n  ```\n\n  Sample output:\n  ```\n  virtualservice.networking.istio.io/productpage created\n  virtualservice.networking.istio.io/reviews created\n  virtualservice.networking.istio.io/ratings created\n  virtualservice.networking.istio.io/details created\n\n  ```\n  Note: The VirtualService defines a rule that captures all HTTP traffic coming in to reviews service, and routes 100% of the traffic to pods of the service with label \"version: v1\". A subset or version of a route destination is identified with a reference to a named service subset which must be declared in a corresponding DestinationRule.\n\n3. View the **BookInfo** application in browser window using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and you should only get the v1 of the **BookInfo** application - No stars for ratings.\n\n\n4. To enable the Istio service mesh for A/B testing against the new service version, modify the original VirtualService rule to send only Firefox traffic to v2. You may change the user-agent to any other installed browser on your machine\n\n  ```\n  cat <<EOF | oc replace -f -\n  apiVersion: networking.istio.io/v1alpha3\n  kind: VirtualService\n  metadata:\n    name: reviews\n  spec:\n    hosts:\n    - reviews\n    http:\n    - match:\n      - headers:\n          user-agent:\n            regex: '.*Firefox.*'\n      route:\n      - destination:\n          host: reviews\n          subset: v2\n    - route:\n      - destination:\n          host: reviews\n          subset: v3\n  EOF\n  ```\n\n  Sample output:\n  ```\n  virtualservice.networking.istio.io/reviews replaced\n  ```\n\n  Note: In Istio VirtualService rules, there can be only one rule for each service and therefore when defining multiple HTTPRoute blocks, the order in which they are defined in the yaml matters. Hence, the original VirtualService rule is modified rather than creating a new rule. With the modified rule, incoming requests originating from Firefox browsers will go to the v2 version(Black stars) of bookinfo. All other requests fall-through to the next block, which routes all traffic to the v3(Red Stars) version of bookinfo.\n\n#### 6.5.2 Canary deployment\n\nIn Canary Deployments, newer versions of services are incrementally rolled out to users to minimize the risk and impact of any bugs introduced by the newer version. To begin incrementally routing traffic to the newer version of the bookinfo service, modify the original VirtualService rule:\n\n1. Run the below command to send 80% of traffic to v1,\n\n  ```\n  oc replace -f bookinfo/networking/virtual-service-reviews-80-20.yaml\n  ```\n\n  In the modified rule, the routed traffic is split between two different subsets of the reviews microservice. In this manner, traffic to the modernized version 2 of reviews is controlled on a percentage basis to limit the impact of any unforeseen bugs. This rule can be modified over time until eventually all traffic is directed to the newer version of the service.\n\n2. View the **BookInfo** application in web browser using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and You should notice that the bookinfo application should swap between V1 or V2 at about the weight you specified.\n\n3. To route all traffic to reviews v3, run command:\n\n  ```\n  oc replace -f bookinfo/networking/virtual-service-reviews-v3.yaml\n  ```\n4.  View the **BookInfo** application in web browser using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and you should only get the v3 of the **BookInfo** application - Red stars for ratings.\n\n#### 6.6  Secure your services\n\nIstio can secure the communication between microservices without requiring application code changes. Security is provided by authenticating and encrypting communication paths within the cluster. This is becoming a common security and compliance requirement. Delegating communication security to Istio (as opposed to implementing TLS in each microservice), ensures that your application will be deployed with consistent and manageable security policies.\n\n1. To configure mutual Transport Layer Security (mTLS), you need to modify your previous destination rules to use ISTIO_MUTUAL.\n\n  ```\n  oc replace -f bookinfo/networking/destination-rule-all-mtls.yaml\n  ```\n\n2. Send more traffic to your application. Everything should still continue to work as expected.\n3. Launch Kiali again and go to Graph.\n4. Select **bookinfo** from the top Namespace bar.\n\n  ![](images/istio-bookinfo-namespace.png)  \n5. Under Display, select Security. \n\n  ![](images/istio-display-security.png)  \n\n  You should see lock icon on all the arrows(traffic).\n\n  ![](images/istio-secured-traffic.png)  \n\n6. To confirm your traffic is secure, click on the arrow from productpage to v1 and you should see mTLS Enabled with lock icon on the right pane.\n\n  ![](images/istio-mtls-enabled.png) \n#### 6.7  Enable SSL for traffic coming in to your cluster (HTTPS)\n\nIn this task, you will create a secure Route to the Ingress Gateway with Edge termination using the default certificate provided by OpenShift. With an edge route, the Ingress Controller terminates TLS encryption before forwarding traffic to the istio-ingressgateway Pod.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under **istio-system** project scope.\n\n  ![](images/istio-istio-system-route.png) \n2. Click **Create Route** to create a new route.\n\n  ![](images/istio-create-route.png)\n\n3. Enter the following parmeters and click **Create**.\n\n    * Name: **istio-ingressgateway-secure**\n    * Service: **istio-ingressgateway**\n    * Target Port: **80->8080(TCP)**\n    * Check Secure Route\n    * TLS Termination: **Edge**\n    * Insecure Traffic: **None**\n \n  ![](images/istio-create-route-2.png)\n\n  The route **istio-ingressgateway-secure** is created.\n4. Visit the new HTTPS URL under Location section of **istio-ingressgateway-secure** route. Remember to add **/productpage** at the end of the URL!\n\n  ![](images/istio-new-route.png)\n\n### 7.\tSummary\nIn this lab, you have learned some basic features and functions of Red Hat OpenShift Service Mesh and how to use it. To learn more about App Mod and DevOps, please continue with the rest of the lab series.\n\n**Congratulations! You have successfully completed OpenShift Service Mesh Introduction Lab!**\n\n","type":"Mdx","contentDigest":"169e97b6a12580c0fd86c2271c1d9ea4","owner":"gatsby-plugin-mdx","counter":3160},"frontmatter":{"title":"Istio Introduction","description":null},"exports":{},"rawBody":"---\ntitle: Istio Introduction\ndescription: \n---\nThe goal of this session is to provide a hands-on experience with Red Hat OpenShift Service Mesh\n\n### 1. Introduction\n\nIstio is an open-source project for integrating and managing traffic flow across services. It works in concert with an underlying cluster manager (like Kubernetes). Centralized components, sidecar proxies, and node agents work together to create the data and control planes over a distributed application. With Istio, You can manage network traffic, load balance across microservices, enforce access policies, verify service identity, secure service communication and observe what exactly is going on with your services.\n\nBased Istio project, Red Hat OpenShift Service Mesh adds a transparent layer on existing distributed applications without requiring any changes to the service code. You add Red Hat OpenShift Service Mesh support to services by deploying a special sidecar proxy to relevant services in the mesh that intercepts all network communication between microservices. You configure and manage the Service Mesh using the control plane features.\n\nIn this lab, you can see how to install Istio alongside microservices for a simple mock app called **Guestbook**. When you deploy Guestbook's microservices into an OpenShift Container Platform (OCP) cluster where Istio is installed, you can choose to inject the Istio Envoy sidecar proxies in the pods of certain microservices.\n\n### 2. Objective\n\nThe objectives of this lab are to help you to learn how to:\n\n* download and install Istio in your cluster\n* deploy the Guestbook sample app\n* use metrics, logging and tracing to observe services\n* set up the Istio Ingress Gateway\n* perform simple traffic management, such as A/B tests and canary deployments\n* secure your service mesh\n* enforce policies for your microservices\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tInstall Red Hat OpenShift Service Mesh\n* Deploy the BookInfo application on Service Mesh\n* Expose the app with the Istio Ingress Gateway and Route\n* Observe service telemetry: metrics and tracing\n* Perform traffic management\n* Secure your services\n* Enable SSL for traffic coming in to your cluster (HTTPS)\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/cn0200st** directory and click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-cn0200st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n  \n#### 6.2 Install Red Hat OpenShift Service Mesh\n\nTo install Red Hat OpenShift Service Mesh, first install the required Operators on OpenShift Container Platform and then create a ServiceMeshControlPlane resource to deploy the control plane.\n\nRed Hat OpenShift Service Mesh requires the following four Operators:\n  * OpenShift Elasticsearch - (Optional) Provides database storage for tracing and logging with Jaeger. It is based on the open source Elasticsearch project.\n  * Jaeger - Provides tracing to monitor and troubleshoot transactions in complex distributed systems. It is based on the open source Jaeger project.\n  * Kiali - Provides observability for your service mesh. Allows you to view configurations, monitor traffic, and analyze traces in a single console. It is based on the open source Kiali project.\n  * Red Hat OpenShift Service Mesh - Allows you to connect, secure, control, and observe the microservices that comprise your applications. The Service Mesh Operator defines and monitors the ServiceMeshControlPlane resources that manage the deployment, updating, and deletion of the Service Mesh components. It is based on the open source Istio project.\n\nIn this lab environment, these operators are alrady installed in the OCP cluster, you need to deploy a basic installation of the ServiceMeshControlPlane through OCP web console to complete the OpenShift Service Mesh installation.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the Could Native Toolkit **Developer Dashboard** bookmark to open it.\n\n  ![](images/ocp-console-bookmark.png) \n  \n3. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The OCP web console Overview page is displayed. \n  \n  ![](images/ocp-console-overview-page.png)\n  \n4. View the installed operators by selecting **Operators**>**Installed Operators** and then selecting **all projects** scope.\n\n  ![](images/istio-installed-operators.png)\n\n5. Scroll through the installed operator list, you can see that these four required operators, including OpenShift Elasticsearch, Jaeger, Kiali and Red Hat OpenShift Service Mesh, are installed\n\n  To deploy a ServiceMeshControlPlane, you need to cerate a new project. The ServiceMeshControlPlane resource must be installed in a project that is separate from your microservices and Operators. This lab uses **istio-system** project as an example, but you can deploy your control plane in any project as long as it is separate from the project that contains your services.\n\n6. Click **Projects**>**Create Project**.\n\n  ![](images/ocp-create-project.png)\n\n7. Enter Name and Display Name as: **istio-system** and click **Create**.\n\n   ![](images/istio-create-project.png)\n\n   The **istio-system** project is created.\n\n8. Navigate to **Operators**>**Installed Operators** .under the **istio-system** scope.\n\n  ![](images/istio-installed-operators-project.png)\n\n9. Click the **Red Hat OpenShift Service Mesh Operator**.\n\n  ![](images/istio-mesh-operator-link.png)\n\n10. Click **Istio Service Mesh Control Plane** tab.\n\n  ![](images/istio-mesh-controlplan-link.png)\n\n11. On the **Istio Service Mesh Control Plane** tab, click **Create ServiceMeshControlPlane**.\n\n  ![](images/istio-create-mesh-controlplan.png)\n\n12. On the **Create ServiceMeshControlPlane** page, accept the default control plane version to take advantage of the features available in the most current version of the product and click **Create**. \n\n  The Operator creates pods, services, and Service Mesh control plane components based on your configuration parameters. When it is done, you see something like this:\n\n  ![](images/istio-mesh-controlplan-installed.png)\n  \n13. To verify the control plane installed correctly, click the name of the new control plane.\n\n  ![](images/istio-created-mesh-controlplan-link.png)\n\n14. Click the **Resources** tab to see the Red Hat OpenShift Service Mesh control plane resources the Operator created and configured.\n\n  To complete the installation, you need to create a **ServiceMeshMemberRoll**. ServiceMeshMemberRoll resource is used to specify the projects/namespaces associated with the Service Mesh. \n15. Navigate to **Operators** > **Installed Operators** again, then click **Red Hat OpenShift Service Mesh**.\n16. Click **Istio Service Mesh Member Roll** tab and click **Create ServiceMeshMemberRoll**.\n\n  ![](images/istio-mesh-member-roll-tab.png)\n\n17. Enter **bookinfo** as the first value, click **Remove Member** to delete the second value and click **Create**.\n\n  ![](images/istio-create-mesh-member.png)\n\nYou successfully installed Istio into your cluster.\n\n#### 6.3 Deploy the BookInfo application on Service Mesh\n\nThe BookInfo application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews.\n\nThe Bookinfo application is broken into four separate microservices:\n  * productpage. The productpage microservice calls the details and reviews microservices to populate the page.\n  * details. The details microservice contains book information.\n  * reviews. The reviews microservice contains book reviews. It also calls the ratings microservice.\n  * ratings. The ratings microservice contains book ranking information that accompanies a book review.\n\nThere are 3 versions of the reviews microservice:\n  * Version v1 doesn’t call the ratings service.\n  * Version v2 calls the ratings service, and displays each rating as 1 to 5 black stars.\n  * Version v3 calls the ratings service, and displays each rating as 1 to 5 red stars.\n\nThe end-to-end architecture of the application is shown below.\n\n![](images/istio-bookinfo-diagram.png)\n\nRed Hat OpenShift Service Mesh relies on the Envoy sidecars within the application’s pod to provide Service Mesh capabilities to the application. You can enable automatic sidecar injection or manage it manually. Automatic injection using the annotation is the recommended way.\n\n1. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n\n2. Navigate to **/home/ibmdemo/app-mod-labs/cn0200st** directory.\n\n  ```\n  cd /home/ibmdemo/app-mod-labs/cn0200st/ \n  ```\n3. List the contents in the directory.\n\n  ```\n  ls -l\n  ```\n\n  Sample output:\n  ```\n  total 8\n  drwxrwxr-x 7 ibmdemo ibmdemo 4096 Jul 17 07:03 bookinfo\n  -rw-rw-r-- 1 ibmdemo ibmdemo  296 Jun 26  2020 Commands.txt\n  ```\n  The **bookinfo** directory contains the artifacts you are going to use to deploy the application with the service mesh.\n  \n4. Next issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  Sample output:\n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n  ```\n6. Create a new project called **bookinfo**.\n\n  ```\n  oc new-project bookinfo\n  ```\n  \n  Sample output:\n  ```\n  Now using project \"bookinfo\" on server \"https://api.demo.ibmdte.net:6443\".\n\n  You can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app rails-postgresql-example\n\n  to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n  ```\n  In OpenShift, a project is a Kubernetes namespace with additional annotations.\n\n7. Deploy the **Bookinfo** application in the **bookinfo** project by applying the **bookinfo.yaml** file on to the OpenShift cluster. This deploys both the v1 and v2 versions of the app.\n\n  ```\n  oc apply -f bookinfo/platform/kube/bookinfo.yaml\n  ```\n  \n  The bookinfo.yaml file is annotated sidecar.istio.io/inject: \"true\" to enable automatic injection of the Istio sidecar for Red Hat OpenShift Service Mesh. So, these pods will also include an Envoy sidecar as they are started in the cluster.\n  \n  Sample output:\n  ```\n  service/details created\n  serviceaccount/bookinfo-details created\n  deployment.apps/details-v1 created\n  service/ratings created\n  serviceaccount/bookinfo-ratings created\n  deployment.apps/ratings-v1 created\n  service/reviews created\n  serviceaccount/bookinfo-reviews created\n  deployment.apps/reviews-v1 created\n  deployment.apps/reviews-v2 created\n  deployment.apps/reviews-v3 created\n  service/productpage created\n  serviceaccount/bookinfo-productpage created\n  deployment.apps/productpage-v1 created\n  ```\n\nNote: An installation of Red Hat OpenShift Service Mesh differs from upstream Istio community installations in multiple ways. Refer this link comparing Service Mesh and Istio. By default, Istio injects the sidecar if you have labeled the project istio-injection=enabled. Red Hat OpenShift Service Mesh handles this differently and requires you to opt in to having the sidecar automatically injected to a deployment, so you are not required to label the project. This avoids injecting a sidecar if it is not wanted (for example, in build or deploy pods).\n\n8. Verify that the pods are up and running.\n\n  ```\n  oc get pods\n  ```\n  \n  Sample output:\n\n  ```\n  NAME                              READY     STATUS    RESTARTS   AGE\n  details-v1-789c5f58f4-9twtw       2/2       Running   0          4m12s\n  productpage-v1-856c8cc5d8-xcx2q   2/2       Running   0          4m11s\n  ratings-v1-5786768978-tr8z9       2/2       Running   0          4m12s\n  reviews-v1-5874566865-mxfgm       2/2       Running   0          4m12s\n  reviews-v2-86865fc7d9-mf6t4       2/2       Running   0          4m12s\n  reviews-v3-8d4cbbbbf-rfjcz        2/2       Running   0          4m12s\n  ```\n  Note that each bookinfo pods has 2 containers in it. One is the bookinfo container, and the other is the Envoy proxy sidecar.\n\n  Your bookinfo app is running, but you can't access it as the service is not yet configured to receive external traffic. In the next section, you will expose the productpage service to allow incoming traffic.\n\n#### 6.4 Expose the app with the Istio Ingress Gateway and Route\n\nThe components deployed on the service mesh by default are not exposed outside the cluster. External access to individual services so far has been provided by creating an external load balancer or node port on each service.\n\nAn Ingress Gateway resource can be created to allow external requests through the Istio Ingress Gateway to the backing services.\n\n1. Configure the **bookinfo** default route with the Istio Ingress Gateway.\n\n  ```\n  oc create -f bookinfo/networking/bookinfo-gateway.yaml\n  ```\n  \n  Sample output:\n  \n  ```\n  gateway.networking.istio.io/bookinfo-gateway created\n  virtualservice.networking.istio.io/bookinfo created\n  ```\n2. Get the ROUTE of the Istio Ingress Gateway.\n\n  ```\n  oc get routes -n istio-system istio-ingressgateway\n  ```\n\n  Sample output:\n\n  ```\n  NAME                   HOST/PORT                                                PATH   SERVICES               PORT   TERMINATION   WILDCARD\n  istio-ingressgateway   istio-ingressgateway-istio-system.apps.demo.ibmdte.net          istio-ingressgateway   8080                 None\n  ```\n\n3. Save the HOST address that you retrieved in the previous step, as it will be used to access the **BookInfo** app in later parts of the tutorial. \n\n4. Create an environment variable called **$INGRESS_HOST** with your HOST address.\n\n  ```\n  export INGRESS_HOST=istio-ingressgateway-istio-system.apps.demo.ibmdte.net\n  ```\n\n5. Visit the application by going to http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage in a new web borswer window. If you keep hitting Refresh, you should see different versions of the page in random order (v1 - no stars, v2 - black stars, v3 - red stars).\n\n  ![](images/istio-bookinfo-productpage.png)\n\n#### 6.4 Observe service telemetry: metrics and tracing\n\n\nIstio's tracing and metrics features are designed to provide broad and granular insight into the health of all services. Istio's role as a service mesh makes it the ideal data source for observability information, particularly in a microservices environment. As requests pass through multiple services, identifying performance bottlenecks becomes increasingly difficult using traditional debugging techniques. Distributed tracing provides a holistic view of requests transiting through multiple services, allowing for immediate identification of latency issues. With Istio, distributed tracing comes by default. This will expose latency, retry, and failure information for each hop in a request.\n\n##### 6.4.1 Visualize Metrics with Grafana\n\nGrafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under the **istio-system** project scope.\n\n  ![](images/istio-istio-system-route.png)\n\n2. Click the URL(Location) next to **grafana** to open the Grafana dashboard in a new browser window.\n\n  ![](images/istio-grafana-route.png)\n\n3. If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n4. Click **Log In with OpenShift**.\n\n  ![](images/istio-login-with-openshift.png)\n\n5. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n6. If you see the **Authorize Access** page, click **Allow selected permissions**.\n\n  ![](images/istio-authorize-access.png)\n\n  The Grafana Home Dashboard is displayed. \n\n7. Click the Dashboard menu in the left navigation panel, select the **Manage**.\n\n  ![](images/istio-grafana-manage.png)\n\n8. Select **Istio** and **Istio Service Dashboard**.\n\n  ![](images/istio-service-dashboard.png)\n\n9. Select **productpage.bookinfo.svc.cluster.local** in the Service drop down.\n\n  ![](images/istio-service-dashboard-productpage.png)\n\n10. From the terminal window, generate a small load to the app by sending traffic to the Ingress host location you set in the last section.\n\n  ```\n  for i in {1..20}; do sleep 0.5; curl -I $INGRESS_HOST/productpage; done\n  ```\n\n11. Go back to the Grafana dashboard to see the results\n\n  ![](images/istio-productpage-dashboard.png)\n  \n  This Grafana dashboard provides metrics for each workload. Explore the other dashboards provided as well.\n\n##### 6.4.2 Observe your Service mesh with Kiali\n\nKiali is an open-source project that installs as an add-on on top of Istio to visualize your service mesh. Kiali provides deeper insight into how your microservices interact with one another, and provides features such as circuit breakers and request rates for your services.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under the **istio-system** project scope.\n2. Click the URL(Location) next to **kiali** to open the Grafana dashboard in a new browser window.\n\n  ![](images/istio-kiali-route.png)\n\n3. If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n4. Click **Log In with OpenShift**.\n5. Click the **Graph** on the left pane and select the **bookinfo** and **istio-system** namespaces from the top bar to see the visual **Versioned app graph** of the various services in your Istio mesh.\n\n  ![](images/istio-kiali-graph.png) \n6. To see the request rates, click **Display** and choose **Requests Per second**.\n\n  ![](images/istio-kiali-display-settings.png) \n7. In a different browser tab/window, visit the **BookInfo** application URL and refresh the page multiple times to generate some load, or run the load script in the previous section to generate load.\n8. Now, check the Kiali Graph to see the requests per second.\n\n  ![](images/istio-kiali-display.png)    \n\n  Kiali has a number of views to help you visualize your services. Click through the various tabs to explore the service graph, and the various views for workloads, applications and services.\n\n#### 6.5 Perform traffic management\n\n\nIstio’s traffic routing rules let you easily control the flow of traffic and API calls between services. Istio simplifies configuration of service-level properties like circuit breakers, timeouts, and retries, and makes it easy to set up important tasks like A/B testing, canary rollouts, and staged rollouts with percentage-based traffic splits. It also provides out-of-box failure recovery features that help make your application more robust against failures of dependent services or the network.\n\nIstio’s traffic management model relies on the Envoy proxies (sidecars) that are deployed along with your services. All traffic that your services send and receive (data plane traffic) is proxied through Envoy, making it easy to direct and control traffic around your mesh without making any changes to your services.\n\nPilot translates high-level rules into low-level configurations and distributes this config to Envoy instances. Pilot uses three types of configuration resources to manage traffic within its service mesh: Virtual Services, Destination Rules, and Service Entries.\n\n#### 6.5.1 A/B testing with Istio\n\nA/B testing is a method of performing identical tests against two separate service versions in order to determine which performs better. To prevent Istio from performing the default routing behavior between the original and modernized service, define the following rules:\n\n1. Run the following command to create default destination rules for the Bookinfo services,\n\n  ```\n  oc create -f bookinfo/networking/destination-rule-all.yaml\n  ```\n  \n  Sample output:\n  ```\n  destinationrule.networking.istio.io/productpage created\n  destinationrule.networking.istio.io/reviews created\n  destinationrule.networking.istio.io/ratings created\n  destinationrule.networking.istio.io/details created\n  ```\n  Note: A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred. These rules specify configuration for load balancing, connection pool size from the sidecar, and outlier detection settings to detect and evict unhealthy hosts from the load balancing pool. Any destination host and subset referenced in a VirtualService rule must be defined in a corresponding DestinationRule.\n\n2. A VirtualService defines a set of traffic routing rules to apply when a host is addressed. Each routing rule defines matching criteria for traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service (or subset/version of it) defined in the registry. Run the below command to send all reviews traffic to v1\n\n  ```\n  oc create -f bookinfo/networking/virtual-service-all-v1.yaml\n  ```\n\n  Sample output:\n  ```\n  virtualservice.networking.istio.io/productpage created\n  virtualservice.networking.istio.io/reviews created\n  virtualservice.networking.istio.io/ratings created\n  virtualservice.networking.istio.io/details created\n\n  ```\n  Note: The VirtualService defines a rule that captures all HTTP traffic coming in to reviews service, and routes 100% of the traffic to pods of the service with label \"version: v1\". A subset or version of a route destination is identified with a reference to a named service subset which must be declared in a corresponding DestinationRule.\n\n3. View the **BookInfo** application in browser window using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and you should only get the v1 of the **BookInfo** application - No stars for ratings.\n\n\n4. To enable the Istio service mesh for A/B testing against the new service version, modify the original VirtualService rule to send only Firefox traffic to v2. You may change the user-agent to any other installed browser on your machine\n\n  ```\n  cat <<EOF | oc replace -f -\n  apiVersion: networking.istio.io/v1alpha3\n  kind: VirtualService\n  metadata:\n    name: reviews\n  spec:\n    hosts:\n    - reviews\n    http:\n    - match:\n      - headers:\n          user-agent:\n            regex: '.*Firefox.*'\n      route:\n      - destination:\n          host: reviews\n          subset: v2\n    - route:\n      - destination:\n          host: reviews\n          subset: v3\n  EOF\n  ```\n\n  Sample output:\n  ```\n  virtualservice.networking.istio.io/reviews replaced\n  ```\n\n  Note: In Istio VirtualService rules, there can be only one rule for each service and therefore when defining multiple HTTPRoute blocks, the order in which they are defined in the yaml matters. Hence, the original VirtualService rule is modified rather than creating a new rule. With the modified rule, incoming requests originating from Firefox browsers will go to the v2 version(Black stars) of bookinfo. All other requests fall-through to the next block, which routes all traffic to the v3(Red Stars) version of bookinfo.\n\n#### 6.5.2 Canary deployment\n\nIn Canary Deployments, newer versions of services are incrementally rolled out to users to minimize the risk and impact of any bugs introduced by the newer version. To begin incrementally routing traffic to the newer version of the bookinfo service, modify the original VirtualService rule:\n\n1. Run the below command to send 80% of traffic to v1,\n\n  ```\n  oc replace -f bookinfo/networking/virtual-service-reviews-80-20.yaml\n  ```\n\n  In the modified rule, the routed traffic is split between two different subsets of the reviews microservice. In this manner, traffic to the modernized version 2 of reviews is controlled on a percentage basis to limit the impact of any unforeseen bugs. This rule can be modified over time until eventually all traffic is directed to the newer version of the service.\n\n2. View the **BookInfo** application in web browser using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and You should notice that the bookinfo application should swap between V1 or V2 at about the weight you specified.\n\n3. To route all traffic to reviews v3, run command:\n\n  ```\n  oc replace -f bookinfo/networking/virtual-service-reviews-v3.yaml\n  ```\n4.  View the **BookInfo** application in web browser using the app URL: **http://istio-ingressgateway-istio-system.apps.demo.ibmdte.net/productpage** and you should only get the v3 of the **BookInfo** application - Red stars for ratings.\n\n#### 6.6  Secure your services\n\nIstio can secure the communication between microservices without requiring application code changes. Security is provided by authenticating and encrypting communication paths within the cluster. This is becoming a common security and compliance requirement. Delegating communication security to Istio (as opposed to implementing TLS in each microservice), ensures that your application will be deployed with consistent and manageable security policies.\n\n1. To configure mutual Transport Layer Security (mTLS), you need to modify your previous destination rules to use ISTIO_MUTUAL.\n\n  ```\n  oc replace -f bookinfo/networking/destination-rule-all-mtls.yaml\n  ```\n\n2. Send more traffic to your application. Everything should still continue to work as expected.\n3. Launch Kiali again and go to Graph.\n4. Select **bookinfo** from the top Namespace bar.\n\n  ![](images/istio-bookinfo-namespace.png)  \n5. Under Display, select Security. \n\n  ![](images/istio-display-security.png)  \n\n  You should see lock icon on all the arrows(traffic).\n\n  ![](images/istio-secured-traffic.png)  \n\n6. To confirm your traffic is secure, click on the arrow from productpage to v1 and you should see mTLS Enabled with lock icon on the right pane.\n\n  ![](images/istio-mtls-enabled.png) \n#### 6.7  Enable SSL for traffic coming in to your cluster (HTTPS)\n\nIn this task, you will create a secure Route to the Ingress Gateway with Edge termination using the default certificate provided by OpenShift. With an edge route, the Ingress Controller terminates TLS encryption before forwarding traffic to the istio-ingressgateway Pod.\n\n1. From the OpenShift web console, select **Networking**>**Routes** under **istio-system** project scope.\n\n  ![](images/istio-istio-system-route.png) \n2. Click **Create Route** to create a new route.\n\n  ![](images/istio-create-route.png)\n\n3. Enter the following parmeters and click **Create**.\n\n    * Name: **istio-ingressgateway-secure**\n    * Service: **istio-ingressgateway**\n    * Target Port: **80->8080(TCP)**\n    * Check Secure Route\n    * TLS Termination: **Edge**\n    * Insecure Traffic: **None**\n \n  ![](images/istio-create-route-2.png)\n\n  The route **istio-ingressgateway-secure** is created.\n4. Visit the new HTTPS URL under Location section of **istio-ingressgateway-secure** route. Remember to add **/productpage** at the end of the URL!\n\n  ![](images/istio-new-route.png)\n\n### 7.\tSummary\nIn this lab, you have learned some basic features and functions of Red Hat OpenShift Service Mesh and how to use it. To learn more about App Mod and DevOps, please continue with the rest of the lab series.\n\n**Congratulations! You have successfully completed OpenShift Service Mesh Introduction Lab!**\n\n","fileAbsolutePath":"/Users/yitang/Downloads/app-mod/src/pages/labs/day2operation-labs/d20100-istio/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}