{"componentChunkName":"component---src-pages-labs-appmod-labs-am-0220-replatform-index-mdx","path":"/labs/appmod-labs/am0220-replatform/","result":{"pageContext":{"frontmatter":{"title":"Deploy a Java App to OCP using the Open Liberty Operator","description":null},"relativePagePath":"/labs/appmod-labs/am0220-replatform/index.mdx","titleType":"page","MdxNode":{"id":"47e77798-bcbd-5b4c-bf65-da96f683938d","children":[],"parent":"86dc4327-814b-518f-9eed-6946122e1387","internal":{"content":"---\ntitle: Deploy a Java App to OCP using the Open Liberty Operator\ndescription: \n---\n\nOne of the solutions included in the IBM **Cloud Paks** is the Open Liberty runtime, a highly composable, fast to start, dynamic application server runtime environment for cloud-native Java microservices.\n\nThis lab exercise is a part of the Application Modernization lab series which focus on the evaluation, re-platforming and re-hosting application modernization approaches and other application modernization related solutions. In this lab, you learn another re-platform option - deploying an existing Java application to an Open Liberty container running on an IBM Red Hat OpenShift Kubernetes Service (OCP) cluster in IBM Cloud using the Open Liberty Operator. \n\nAn Operator is an extension to Kubernetes which implements a custom controller for packaging, deployment and management of a Kubernetes application in OCP. The Open Liberty Operator deploys and manages a Java EE/MicroProfile/Spring application running on Open Liberty in a OCP cluster.\n\n### 1.\tBusiness Scenario\n\nAssume that your company has a web application called Mod Resorts, depicted in the image below, a WebSphere application showing the weather in various locations. Your company wants to move this application from an on-premises standalone deployment to a cloud capable deployment.\n\n![](images/mod-resorts-app-home-page.png) \n\nAs a tech lead, you have already analyzed the application using the IBM Transformation Advisor tool. Based on the analysis you know that you can move this application from the traditional WebSphere Server environment to a light-weighted Open Liberty server environment without any code change (The Transformation Advisor analysis steps are covered in the lab 1 of this lab series!). Now you are planning to deploy this application to an Open Liberty instance running on an OpenShift Kubernetes cluster. In this lab, you are going to implement this solution. The Mod Resorts application is currently deployed on-premises in the local WebSphere Application Server (WAS). You create an Open Liberty Docker image with the Mod Resorts application and deploy the Docker container to OpenShift Kubernetes cluster using the Open Liberty Operator.\n\n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tObtain some knowledge of the Open Liberty Operator\n*\tLearn how to create an Open Liberty Docker image\n*\tLearn how to use the Open Liberty Operator to deploy the Open Liberty Docker container to OpenShift Kubernetes cluster.\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  * User ID: **ibmdemo**\n  * Password: **passw0rd**\n  \n  Note: Use the Password above in the workstation VM terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/am0200st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\treview the Mod Resorts app on local WAS server.\n*\tbuild an Open Liberty Docker image.\n*\tpush the Open Liberty Docker image to a OCP cluster internal image registry.\n*\tdeploy the Open Liberty container to a OCP cluster sing the Open Liberty Operator.\n*\tverify Open Liberty container deployment.\n*\ttest and verify the Mod Resorts app on Open Liberty container.\n*\tupdate the Mod Resorts app deployment configuration.\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/am0220st** directory and click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-am0220st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n\n#### 6.2 Review the on-premises WebSphere application (skip this step if you are using your own workstation)\n\nIn this task, you take a look at Mod Resorts application deployed to the local WebSphere Application Server (WAS) environment. You are going to move this application to the cloud using Open Liberty Operator later.\n\n1.\tStart WebSphere Application Server\n\n    In the Workstation VM, you have a local WebSphere Application Server which hosts several sample applications. \n    To start the WAS server:\n    \n    a. In the terminal window, issue the command below to start the WAS server.\n    \n    ```\n    /home/ibmdemo/app-mod-labs/shared/startWAS.sh\n    ```\n\n    If prompted for **sudo** password, enter the password as: **passw0rd**.\n    \n    Within a few minutes the WAS server is ready.\n\n    b.\tAccess the WAS Admin Console to view the application deployed by clicking the Firefox icon on the Desktop toolbar.\n    \n    ![](images/firefox-icon.png)\n \n    c.\tFrom the web browser window and click WebSphere Integrated Solution Console bookmark to launch the WAS console.\n\n    ![](images/was-bookmark.png)\n \n    d.  If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n    \n    e.\tIn the WAS Admin Console login page, enter the User ID and Password as: **wsadmin**/**passw0rd** and click **Login**.\n\n    f.\tOn the WAS Console page, click **Applications** -> **Application Types** -> **WebSphere enterprise applications** to view the apps deployed.\n\n    ![](images/was-enterprise-apps.png)\n \n    In the Enterprise Applications list, you can see all applications deployed. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to the cloud.\n\n2.\tView the Mod Resorts application\n\n    a. From the web browser window, click new Tab to open a new browser window. Type the Mod Resorts application URL: **http://localhost:9080/resorts/** and press **Enter**.\n\n    The Mod Resorts application home page is displayed.\n\n    ![](images/mod-resorts-app-home-page.png)\n\n    b. Click **WHERE TO?** dropdown menu to see the city list.\n\n    ![](images/mod-resorts-app-where-to.png)\n \n    c. Click **PARIS, FRANCE** from the list, it shows the weather of the city.\n\n    ![](images/mod-resorts-app-paris.png)    \n \n    Now that you have reviewed the application, next you learn how the solution included in IBM Cloud Paks helps to move this application to the cloud.\n\n    d. Go back to the terminal window and issue the command below to stop the WAS server.\n\n    ```\n    sudo /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopServer.sh server1\n    ````\n    If prompted, enter the sudo password as; **passw0rd** and WAS admin credentials as: **wsadmin**/**passw0rd**.\n\n### 6.3\tInstall the Open Liberty Operator\n\nIn OCP, the Kubernetes-native applications are deployed on Kubernetes cluster and managed with the Kubernetes APIs and OCP specific API’s. A Kubernetes Operator is a custom controller in OCP, which packages, deploys and manages a Kubernetes-native application, and eases operational complexity. The Open Liberty Operator is an implementation of a Kubernetes Operator, which deploys and manages a Java EE/MicroProfile/Spring application running on Open Liberty in OCP. \n\nThe Open Liberty Operator can be used to deploy and manage applications running on Open Liberty. You can also perform Day-2 operations such as gathering traces and dumps using the operator. \n\nThe operator provides the following key features:\n*\tRouting - expose your application to external users via a single toggle.\n*\tHigh Availability - run multiple instances of your application for high availability. Either specify a static number of replicas or easily configure auto scaling to create (and delete) instances based on resource consumption.\n*\tPersistence - enable persistence for your application by specifying storage requirements.\n*\tServiceability - easily use a single storage for serviceability related operations, such as gathering server traces or dumps.\n*\tService Binding - easily bind to available services in your cluster.\n*\tKnative - deploy your serverless application on Knative using a single toggle.\n\nThe architecture of the Open Liberty Operator follows the basic controller pattern: the Operator container with the controller is deployed into a Pod and listens for incoming resources with a Kind: OpenLibertyApplication. The operator introduces relies on an OpenLibertyApplication custom resource definition (CRD). Then applying an OpenLibertyApplication custom resource (CR) triggers the Open Liberty Operator to create, update or delete Kubernetes resources needed by the application to run on your cluster.\n\nIn this lab, you use the following steps to install the Open Liberty Operator from the OCP Operator Hub.\n\n1.\tFrom the browser window, click the OCP web console bookmark to open it.\n \n    ![](images/ocp-console-bookmark.png)\n\n2. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n    ![](images/ocp-console-login-1.png) \n\n    ![](images/ocp-console-login-2.png) \n    \n3.\tIn the OpenShift Web Console page, click **Operators**>**OperatorHub**.\n\n    ![](images/ocp-operators-operatorhub.png) \n4.\tThe OperatorHub page is displayed, change Project to openshift-operator.\n\n    ![](images/openshift-operator-project.png) \n5.\tEnter liberty in the Filter field.\n\n    ![](images/operatorhub-page.png) \n6.\tClick **Open Liberty Operator** icon to install it.\n\n    ![](images/search-for-open-liberty.png) \n7.\tClick **Install** to start the process.\n\n    ![](images/open-liberty-operator-install.png) \n8.\tIn the next page, click **Subscribe**.\n\n    ![](images/open-liberty-operator-subscribe.png) \n\n    The Open Liberty Operator is now installed, and the Custom Resource Definitions used by the operator are deployed.\n\n    In order to deploy an Open Liberty application to a OCP cluster with the Open Liberty Operator, you need:\n    *\tAn Open Liberty Image\n    *\tAn Open Liberty Operator CR\n\n#### 6.4\tBuild an Open Liberty Docker Image.\n\nThe IBM Cloud Paks has a tool called Transformation Advisor, which can be used to analyze your existing java applications and evaluate the efforts to move them to cloud. The analysis of the Mod Resorts application is covered in lab **AM0100** of this lab series. The analysis report shows that the Mod Resorts application can be directly moved the Open Liberty server in a Docker container without any code change. In this task, you are going to build an Open Liberty Docker image containing the Mod Resorts application. \nThe Dockerfile is the key file you needed to build your Docker image. It defines how the Docker image that has the Mod Resorts application and configuration pre-loaded is built.\n\n1.\tReview the Dockerfile file.\n\n    a. From the **File Manager** window nvigate to **/home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/** directory.\n\n    ![](images/am0220-appmod-resorts-folder.png)\n    c. Double click the **dockerfile** to open it in the Text editor for reviewing.\n    \n    Sample output:\n    ```\n    FROM openliberty/open-liberty:javaee8-ubi-min\n    COPY --chown=1001:0 data/examples/modresorts-1.0.war /config/dropins\n    COPY --chown=1001:0 server.xml /config/\n    ```\n        \n    As you can see, the file defines the following activities to create the Open Liberty Docker image:\n    *\tPulls the Open Liberty Java EE 8 image from Docker Hub\n    *\tAdds the application binary file to the base image\n    *\tAdds the Open Liberty server.xml file to the base image\n\n    Note: the **server.xml** file is the Open Liberty server configuration file. In this lab, a sample server.xml is used, it contains the default Open Liberty server settings meet all the Mod Resorts application needs.\n \n2.\tBuild the Docker image.\n\n    a. To build the Docker image, execute the following commands in the terminal window:\n\n    ```\n    cd /home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/\n    docker build . -t app-modernization:v1.0.0\n    ```\n    \n    The command above combines what is normally two steps in the image build process:\n    *\tBuilding the Docker image\n    *\tTagging the image with a name that is consistent with OCP cluster registry requirements\n\n    Sample output:\n    ```\n    Sending build context to Docker daemon  18.15MB\n    Step 1/3 : FROM openliberty/open-liberty:javaee8-ubi-min\n    ---> e8f8cc10305e\n    Step 2/3 : COPY --chown=1001:0 data/examples/modresorts-1.0.war /config/dropins\n    ---> 5e1ece57533c\n    Step 3/3 : COPY --chown=1001:0 server.xml /config/\n    ---> d94c64534e78\n    Successfully built d94c64534e78\n    Successfully tagged app-modernization:v1.0.0\n    ```\n\n    b. After the docker container image is created, you can issue the command below to check it:\n    \n    ```\n    docker images | grep app-modernization\n    ```\n    Sample output:\n    ```\n    app-modernization                                                                             v1.0.0                    d94c64534e78        2 minutes ago       452MB\n    ```\n    c. To verify the docker image, you can create and run a local container called **modresorts-loc** with the command below:\n    \n    ```\n    docker run --name modsorts-loc -p 9443:9443 -d app-modernization:v1.0.0\n    ```\n\n    d. Once the container is created, you can test the **Mod Resorts** application by launching it in a web browser window with the URL: **https:<span></span>//localhost:9443/resorts**.\n\n#### 6.5\tPush the Open Liberty Docker Image to OCP cluster Image Registry\n\nAfter the Open Liberty Docker image is built, you need to push it to the OpenShift cluster image registry, so you can use it to deploy the Open Liberty container to OCP cluster.\n\n1. From the terminal window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  Sample output:\n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n  ```\n6.\tCreate a new project (namespace) as **modresorts10war**.\n\n  ```\n  oc new-project demo\n  ```\n  \n  Sample output:\n  ```\n  Now using project \"demo\" on server \"https://api.demo.ibmdte.net:6443\".\n\n  You can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app rails-postgresql-example\n\n  to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n  ```\n7.\tGet OCP internal image registry URL and cluster URL with commands:\n\n  ```\n  export INTERNAL_REG_HOST=`oc get route default-route --template='{{ .spec.host }}' -n openshift-image-registry`\n  export CLUSTER_URL=`echo $INTERNAL_REG_HOST | sed 's/default-route-openshift-image-registry.//g'`\n  ```\n\n8.\tLog in to the OpenShift Docker registry with the command:\n    \n    ```\n    docker login -u $(oc whoami) -p $(oc whoami -t) $INTERNAL_REG_HOST\n    ```\n \n9. Execute the following command to push your docker image to OpenShift image repository.\n\n    ```\n    docker tag app-modernization:v1.0.0 $INTERNAL_REG_HOST/`oc project -q`/app-modernization:v1.0.0\n    docker push $INTERNAL_REG_HOST/`oc project -q`/app-modernization:v1.0.0\n    ```\n    \n    When it is done, your application docker image is pushed to the OCP image registry.\n\n10.\tVerify the pushed Docker image in OCP cluster.\n\n    a.\tFrom the OCP Web Console Home page, click **Builds**>**Images Streams**.\n  \n   ![](images/ocp-builds-is.png) \n   \n    b.\tChange the **Project** from **default** to **demo**.\n   \n   ![](images/ocp-demo-project.png) \n\n    c.\tYou can see the image you just pushed is listed. Click its link to view its details.\n \n   ![](images/ocp-demo-is.png) \n\n    In the Image Stream Details Page Overview section, you see the public image repository you used to push the image.  Notice that the public image repository is mapped to an internal image repository which is used to deploy the application.  The internal image repository is: **image-registry.openshift-image-registry.svc:5000/demo/app-modernization**.\n \n   ![](images/ocp-is-overview.png) \n \n#### 6.6\tDeploy the Open Liberty Container to OCP using the Open Liberty Operator\n\nIn this task, you are going to deploy the Open Liberty container to the OCP cluster using the Open Liberty operator CR. The operator provides an easy way to quickly provision an Open Liberty container in an OpenShift Kubernetes cluster environment.\n\n1.\tReview the Open Liberty operator CR YAML file. From the File Manager navigate to **/home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/deploy/apps/appmod/v1.0.0/**  directory. Double click the **app-mod_cr.yaml** to open it in Text editor for reviewing.\n\n    Sample output:\n    ```\n    apiVersion: openliberty.io/v1beta1\n    kind: OpenLibertyApplication\n    metadata:\n    name: appmod\n    spec:\n    stack: java-microprofile\n    applicationImage: image-registry.openshift-image-registry.svc:5000/demo/app-modernization:v1.0.0\n    ```\n\n    This CR file contains the minimum required spec entries for application deployment. The CR file specifies that it is using the Open Liberty Operator CRD (OpenLibertyApplication) with an application image URL.\n\n    For more information about the configuration parameters in the OpenLibertyApplication CR, please visit: https://github.com/OpenLiberty/open-liberty-operator/blob/master/doc/user-guide.md.\n\n2.\tDeploy the Open Liberty container.\n\n    Use the following OpenShift CLI commands to deploy the Open Liberty container:\n\n    ```\n    cd /home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/\n    oc apply -f deploy/apps/appmod/v1.0.0/app-mod_cr.yaml -n demo\n    ```\n    Sample output:\n    ```\n    openlibertyapplication.openliberty.io/appmod created\n    ```\n    The Open Liberty container is deployed to OpenShift Kubernetes cluster demo namespace by the Open Liberty Operator.\n\n    As you can see in the verification section next, although you just have the application image URL specified in the CR file, the Open Liberty Operator takes care of application deployment process and creates the Kubernetes service for the application automatically.\n\n#### 6.7\tVerify the Open Liberty Container Deployment\n\nAfter the Open Liberty container is deployed, you can go to the OCP console to take a look at the deployment details.\n\n1.\tGo back to the OCP cluster Web Console window, select **Workloads**>**Pods**, then selection demo project.\n    \n    ![](images/ocp-workloads-pods-demo.png)\n    You can see that your application is in list and it is running.\n\n    ![](images/ocp-demo-app-running.png)\n2.\tTo view the application service, from the OCP cluster Web Console navigation menu, select **Networking**>**Services**. You see the application service is created by the Open Liberty Operator.\n\n    ![](images/ocp-demo-service.png)\n3.\tTo access the application URL, you need to create a route with the application service resource. from the OCP cluster Web Console navigation menu, select **Networking**>**Routes** and click **Create Route**.\n\n    ![](images/ocp-create-route.png)\n\n4.\tIn the Create Route page, enter the following values and click Create.\n\n    **Name** = appmod\n    \n    **Path** = /resorts\n\n    **Service** = appmod\n\n    **Target** = 9080\n\n\n\n\n    ![](images/ocp-create-route-details.png)\n\n5.\tThe route is created, click the **Location** URL to launch the application from a new browser window.\n\n    ![](images/ocp-new-route-url.png)\n \n 6.\tThe Mod Resorts application home page is displayed. Click **WHERE TO?** to view city list.\n \n7.\tClick **LAS VEGAS, USA** from the list and it shows the weather of the city.\n \n### 7.\tSummary\n\nIn this lab, you learned how to use Open Liberty Operator to deploy your JEE applications to cloud. As a part of IBM Application Modernization solutions in IBM Cloud Paks, the Open Liberty Operator helps users effectively deploying and managing applications running on Open Liberty containers to a Kubernetes cluster. To learn more about Application Modernization solutions, please continue with the rest of the lab series.\n\nCongratulations! You have successfully completed the lab “Deploy a Java App to OCP using the Open Liberty Operator”\n","type":"Mdx","contentDigest":"b6c95652e828279abf1aef3107cd2ea8","owner":"gatsby-plugin-mdx","counter":6227},"frontmatter":{"title":"Deploy a Java App to OCP using the Open Liberty Operator","description":null},"exports":{},"rawBody":"---\ntitle: Deploy a Java App to OCP using the Open Liberty Operator\ndescription: \n---\n\nOne of the solutions included in the IBM **Cloud Paks** is the Open Liberty runtime, a highly composable, fast to start, dynamic application server runtime environment for cloud-native Java microservices.\n\nThis lab exercise is a part of the Application Modernization lab series which focus on the evaluation, re-platforming and re-hosting application modernization approaches and other application modernization related solutions. In this lab, you learn another re-platform option - deploying an existing Java application to an Open Liberty container running on an IBM Red Hat OpenShift Kubernetes Service (OCP) cluster in IBM Cloud using the Open Liberty Operator. \n\nAn Operator is an extension to Kubernetes which implements a custom controller for packaging, deployment and management of a Kubernetes application in OCP. The Open Liberty Operator deploys and manages a Java EE/MicroProfile/Spring application running on Open Liberty in a OCP cluster.\n\n### 1.\tBusiness Scenario\n\nAssume that your company has a web application called Mod Resorts, depicted in the image below, a WebSphere application showing the weather in various locations. Your company wants to move this application from an on-premises standalone deployment to a cloud capable deployment.\n\n![](images/mod-resorts-app-home-page.png) \n\nAs a tech lead, you have already analyzed the application using the IBM Transformation Advisor tool. Based on the analysis you know that you can move this application from the traditional WebSphere Server environment to a light-weighted Open Liberty server environment without any code change (The Transformation Advisor analysis steps are covered in the lab 1 of this lab series!). Now you are planning to deploy this application to an Open Liberty instance running on an OpenShift Kubernetes cluster. In this lab, you are going to implement this solution. The Mod Resorts application is currently deployed on-premises in the local WebSphere Application Server (WAS). You create an Open Liberty Docker image with the Mod Resorts application and deploy the Docker container to OpenShift Kubernetes cluster using the Open Liberty Operator.\n\n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tObtain some knowledge of the Open Liberty Operator\n*\tLearn how to create an Open Liberty Docker image\n*\tLearn how to use the Open Liberty Operator to deploy the Open Liberty Docker container to OpenShift Kubernetes cluster.\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  * User ID: **ibmdemo**\n  * Password: **passw0rd**\n  \n  Note: Use the Password above in the workstation VM terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/am0200st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\treview the Mod Resorts app on local WAS server.\n*\tbuild an Open Liberty Docker image.\n*\tpush the Open Liberty Docker image to a OCP cluster internal image registry.\n*\tdeploy the Open Liberty container to a OCP cluster sing the Open Liberty Operator.\n*\tverify Open Liberty container deployment.\n*\ttest and verify the Mod Resorts app on Open Liberty container.\n*\tupdate the Mod Resorts app deployment configuration.\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/am0220st** directory and click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-am0220st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n\n#### 6.2 Review the on-premises WebSphere application (skip this step if you are using your own workstation)\n\nIn this task, you take a look at Mod Resorts application deployed to the local WebSphere Application Server (WAS) environment. You are going to move this application to the cloud using Open Liberty Operator later.\n\n1.\tStart WebSphere Application Server\n\n    In the Workstation VM, you have a local WebSphere Application Server which hosts several sample applications. \n    To start the WAS server:\n    \n    a. In the terminal window, issue the command below to start the WAS server.\n    \n    ```\n    /home/ibmdemo/app-mod-labs/shared/startWAS.sh\n    ```\n\n    If prompted for **sudo** password, enter the password as: **passw0rd**.\n    \n    Within a few minutes the WAS server is ready.\n\n    b.\tAccess the WAS Admin Console to view the application deployed by clicking the Firefox icon on the Desktop toolbar.\n    \n    ![](images/firefox-icon.png)\n \n    c.\tFrom the web browser window and click WebSphere Integrated Solution Console bookmark to launch the WAS console.\n\n    ![](images/was-bookmark.png)\n \n    d.  If you see the **Warning: Potential Security Risk Ahead** message, click **Advanced**>**Accept the Risk and continue**.\n    \n    e.\tIn the WAS Admin Console login page, enter the User ID and Password as: **wsadmin**/**passw0rd** and click **Login**.\n\n    f.\tOn the WAS Console page, click **Applications** -> **Application Types** -> **WebSphere enterprise applications** to view the apps deployed.\n\n    ![](images/was-enterprise-apps.png)\n \n    In the Enterprise Applications list, you can see all applications deployed. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to the cloud.\n\n2.\tView the Mod Resorts application\n\n    a. From the web browser window, click new Tab to open a new browser window. Type the Mod Resorts application URL: **http://localhost:9080/resorts/** and press **Enter**.\n\n    The Mod Resorts application home page is displayed.\n\n    ![](images/mod-resorts-app-home-page.png)\n\n    b. Click **WHERE TO?** dropdown menu to see the city list.\n\n    ![](images/mod-resorts-app-where-to.png)\n \n    c. Click **PARIS, FRANCE** from the list, it shows the weather of the city.\n\n    ![](images/mod-resorts-app-paris.png)    \n \n    Now that you have reviewed the application, next you learn how the solution included in IBM Cloud Paks helps to move this application to the cloud.\n\n    d. Go back to the terminal window and issue the command below to stop the WAS server.\n\n    ```\n    sudo /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopServer.sh server1\n    ````\n    If prompted, enter the sudo password as; **passw0rd** and WAS admin credentials as: **wsadmin**/**passw0rd**.\n\n### 6.3\tInstall the Open Liberty Operator\n\nIn OCP, the Kubernetes-native applications are deployed on Kubernetes cluster and managed with the Kubernetes APIs and OCP specific API’s. A Kubernetes Operator is a custom controller in OCP, which packages, deploys and manages a Kubernetes-native application, and eases operational complexity. The Open Liberty Operator is an implementation of a Kubernetes Operator, which deploys and manages a Java EE/MicroProfile/Spring application running on Open Liberty in OCP. \n\nThe Open Liberty Operator can be used to deploy and manage applications running on Open Liberty. You can also perform Day-2 operations such as gathering traces and dumps using the operator. \n\nThe operator provides the following key features:\n*\tRouting - expose your application to external users via a single toggle.\n*\tHigh Availability - run multiple instances of your application for high availability. Either specify a static number of replicas or easily configure auto scaling to create (and delete) instances based on resource consumption.\n*\tPersistence - enable persistence for your application by specifying storage requirements.\n*\tServiceability - easily use a single storage for serviceability related operations, such as gathering server traces or dumps.\n*\tService Binding - easily bind to available services in your cluster.\n*\tKnative - deploy your serverless application on Knative using a single toggle.\n\nThe architecture of the Open Liberty Operator follows the basic controller pattern: the Operator container with the controller is deployed into a Pod and listens for incoming resources with a Kind: OpenLibertyApplication. The operator introduces relies on an OpenLibertyApplication custom resource definition (CRD). Then applying an OpenLibertyApplication custom resource (CR) triggers the Open Liberty Operator to create, update or delete Kubernetes resources needed by the application to run on your cluster.\n\nIn this lab, you use the following steps to install the Open Liberty Operator from the OCP Operator Hub.\n\n1.\tFrom the browser window, click the OCP web console bookmark to open it.\n \n    ![](images/ocp-console-bookmark.png)\n\n2. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n    ![](images/ocp-console-login-1.png) \n\n    ![](images/ocp-console-login-2.png) \n    \n3.\tIn the OpenShift Web Console page, click **Operators**>**OperatorHub**.\n\n    ![](images/ocp-operators-operatorhub.png) \n4.\tThe OperatorHub page is displayed, change Project to openshift-operator.\n\n    ![](images/openshift-operator-project.png) \n5.\tEnter liberty in the Filter field.\n\n    ![](images/operatorhub-page.png) \n6.\tClick **Open Liberty Operator** icon to install it.\n\n    ![](images/search-for-open-liberty.png) \n7.\tClick **Install** to start the process.\n\n    ![](images/open-liberty-operator-install.png) \n8.\tIn the next page, click **Subscribe**.\n\n    ![](images/open-liberty-operator-subscribe.png) \n\n    The Open Liberty Operator is now installed, and the Custom Resource Definitions used by the operator are deployed.\n\n    In order to deploy an Open Liberty application to a OCP cluster with the Open Liberty Operator, you need:\n    *\tAn Open Liberty Image\n    *\tAn Open Liberty Operator CR\n\n#### 6.4\tBuild an Open Liberty Docker Image.\n\nThe IBM Cloud Paks has a tool called Transformation Advisor, which can be used to analyze your existing java applications and evaluate the efforts to move them to cloud. The analysis of the Mod Resorts application is covered in lab **AM0100** of this lab series. The analysis report shows that the Mod Resorts application can be directly moved the Open Liberty server in a Docker container without any code change. In this task, you are going to build an Open Liberty Docker image containing the Mod Resorts application. \nThe Dockerfile is the key file you needed to build your Docker image. It defines how the Docker image that has the Mod Resorts application and configuration pre-loaded is built.\n\n1.\tReview the Dockerfile file.\n\n    a. From the **File Manager** window nvigate to **/home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/** directory.\n\n    ![](images/am0220-appmod-resorts-folder.png)\n    c. Double click the **dockerfile** to open it in the Text editor for reviewing.\n    \n    Sample output:\n    ```\n    FROM openliberty/open-liberty:javaee8-ubi-min\n    COPY --chown=1001:0 data/examples/modresorts-1.0.war /config/dropins\n    COPY --chown=1001:0 server.xml /config/\n    ```\n        \n    As you can see, the file defines the following activities to create the Open Liberty Docker image:\n    *\tPulls the Open Liberty Java EE 8 image from Docker Hub\n    *\tAdds the application binary file to the base image\n    *\tAdds the Open Liberty server.xml file to the base image\n\n    Note: the **server.xml** file is the Open Liberty server configuration file. In this lab, a sample server.xml is used, it contains the default Open Liberty server settings meet all the Mod Resorts application needs.\n \n2.\tBuild the Docker image.\n\n    a. To build the Docker image, execute the following commands in the terminal window:\n\n    ```\n    cd /home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/\n    docker build . -t app-modernization:v1.0.0\n    ```\n    \n    The command above combines what is normally two steps in the image build process:\n    *\tBuilding the Docker image\n    *\tTagging the image with a name that is consistent with OCP cluster registry requirements\n\n    Sample output:\n    ```\n    Sending build context to Docker daemon  18.15MB\n    Step 1/3 : FROM openliberty/open-liberty:javaee8-ubi-min\n    ---> e8f8cc10305e\n    Step 2/3 : COPY --chown=1001:0 data/examples/modresorts-1.0.war /config/dropins\n    ---> 5e1ece57533c\n    Step 3/3 : COPY --chown=1001:0 server.xml /config/\n    ---> d94c64534e78\n    Successfully built d94c64534e78\n    Successfully tagged app-modernization:v1.0.0\n    ```\n\n    b. After the docker container image is created, you can issue the command below to check it:\n    \n    ```\n    docker images | grep app-modernization\n    ```\n    Sample output:\n    ```\n    app-modernization                                                                             v1.0.0                    d94c64534e78        2 minutes ago       452MB\n    ```\n    c. To verify the docker image, you can create and run a local container called **modresorts-loc** with the command below:\n    \n    ```\n    docker run --name modsorts-loc -p 9443:9443 -d app-modernization:v1.0.0\n    ```\n\n    d. Once the container is created, you can test the **Mod Resorts** application by launching it in a web browser window with the URL: **https:<span></span>//localhost:9443/resorts**.\n\n#### 6.5\tPush the Open Liberty Docker Image to OCP cluster Image Registry\n\nAfter the Open Liberty Docker image is built, you need to push it to the OpenShift cluster image registry, so you can use it to deploy the Open Liberty container to OCP cluster.\n\n1. From the terminal window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  Sample output:\n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n  ```\n6.\tCreate a new project (namespace) as **modresorts10war**.\n\n  ```\n  oc new-project demo\n  ```\n  \n  Sample output:\n  ```\n  Now using project \"demo\" on server \"https://api.demo.ibmdte.net:6443\".\n\n  You can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app rails-postgresql-example\n\n  to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n  ```\n7.\tGet OCP internal image registry URL and cluster URL with commands:\n\n  ```\n  export INTERNAL_REG_HOST=`oc get route default-route --template='{{ .spec.host }}' -n openshift-image-registry`\n  export CLUSTER_URL=`echo $INTERNAL_REG_HOST | sed 's/default-route-openshift-image-registry.//g'`\n  ```\n\n8.\tLog in to the OpenShift Docker registry with the command:\n    \n    ```\n    docker login -u $(oc whoami) -p $(oc whoami -t) $INTERNAL_REG_HOST\n    ```\n \n9. Execute the following command to push your docker image to OpenShift image repository.\n\n    ```\n    docker tag app-modernization:v1.0.0 $INTERNAL_REG_HOST/`oc project -q`/app-modernization:v1.0.0\n    docker push $INTERNAL_REG_HOST/`oc project -q`/app-modernization:v1.0.0\n    ```\n    \n    When it is done, your application docker image is pushed to the OCP image registry.\n\n10.\tVerify the pushed Docker image in OCP cluster.\n\n    a.\tFrom the OCP Web Console Home page, click **Builds**>**Images Streams**.\n  \n   ![](images/ocp-builds-is.png) \n   \n    b.\tChange the **Project** from **default** to **demo**.\n   \n   ![](images/ocp-demo-project.png) \n\n    c.\tYou can see the image you just pushed is listed. Click its link to view its details.\n \n   ![](images/ocp-demo-is.png) \n\n    In the Image Stream Details Page Overview section, you see the public image repository you used to push the image.  Notice that the public image repository is mapped to an internal image repository which is used to deploy the application.  The internal image repository is: **image-registry.openshift-image-registry.svc:5000/demo/app-modernization**.\n \n   ![](images/ocp-is-overview.png) \n \n#### 6.6\tDeploy the Open Liberty Container to OCP using the Open Liberty Operator\n\nIn this task, you are going to deploy the Open Liberty container to the OCP cluster using the Open Liberty operator CR. The operator provides an easy way to quickly provision an Open Liberty container in an OpenShift Kubernetes cluster environment.\n\n1.\tReview the Open Liberty operator CR YAML file. From the File Manager navigate to **/home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/deploy/apps/appmod/v1.0.0/**  directory. Double click the **app-mod_cr.yaml** to open it in Text editor for reviewing.\n\n    Sample output:\n    ```\n    apiVersion: openliberty.io/v1beta1\n    kind: OpenLibertyApplication\n    metadata:\n    name: appmod\n    spec:\n    stack: java-microprofile\n    applicationImage: image-registry.openshift-image-registry.svc:5000/demo/app-modernization:v1.0.0\n    ```\n\n    This CR file contains the minimum required spec entries for application deployment. The CR file specifies that it is using the Open Liberty Operator CRD (OpenLibertyApplication) with an application image URL.\n\n    For more information about the configuration parameters in the OpenLibertyApplication CR, please visit: https://github.com/OpenLiberty/open-liberty-operator/blob/master/doc/user-guide.md.\n\n2.\tDeploy the Open Liberty container.\n\n    Use the following OpenShift CLI commands to deploy the Open Liberty container:\n\n    ```\n    cd /home/ibmdemo/app-mod-labs/am0220st/appmod-resorts/\n    oc apply -f deploy/apps/appmod/v1.0.0/app-mod_cr.yaml -n demo\n    ```\n    Sample output:\n    ```\n    openlibertyapplication.openliberty.io/appmod created\n    ```\n    The Open Liberty container is deployed to OpenShift Kubernetes cluster demo namespace by the Open Liberty Operator.\n\n    As you can see in the verification section next, although you just have the application image URL specified in the CR file, the Open Liberty Operator takes care of application deployment process and creates the Kubernetes service for the application automatically.\n\n#### 6.7\tVerify the Open Liberty Container Deployment\n\nAfter the Open Liberty container is deployed, you can go to the OCP console to take a look at the deployment details.\n\n1.\tGo back to the OCP cluster Web Console window, select **Workloads**>**Pods**, then selection demo project.\n    \n    ![](images/ocp-workloads-pods-demo.png)\n    You can see that your application is in list and it is running.\n\n    ![](images/ocp-demo-app-running.png)\n2.\tTo view the application service, from the OCP cluster Web Console navigation menu, select **Networking**>**Services**. You see the application service is created by the Open Liberty Operator.\n\n    ![](images/ocp-demo-service.png)\n3.\tTo access the application URL, you need to create a route with the application service resource. from the OCP cluster Web Console navigation menu, select **Networking**>**Routes** and click **Create Route**.\n\n    ![](images/ocp-create-route.png)\n\n4.\tIn the Create Route page, enter the following values and click Create.\n\n    **Name** = appmod\n    \n    **Path** = /resorts\n\n    **Service** = appmod\n\n    **Target** = 9080\n\n\n\n\n    ![](images/ocp-create-route-details.png)\n\n5.\tThe route is created, click the **Location** URL to launch the application from a new browser window.\n\n    ![](images/ocp-new-route-url.png)\n \n 6.\tThe Mod Resorts application home page is displayed. Click **WHERE TO?** to view city list.\n \n7.\tClick **LAS VEGAS, USA** from the list and it shows the weather of the city.\n \n### 7.\tSummary\n\nIn this lab, you learned how to use Open Liberty Operator to deploy your JEE applications to cloud. As a part of IBM Application Modernization solutions in IBM Cloud Paks, the Open Liberty Operator helps users effectively deploying and managing applications running on Open Liberty containers to a Kubernetes cluster. To learn more about Application Modernization solutions, please continue with the rest of the lab series.\n\nCongratulations! You have successfully completed the lab “Deploy a Java App to OCP using the Open Liberty Operator”\n","fileAbsolutePath":"/Users/yitang/Downloads/app-mod/src/pages/labs/appmod-labs/am0220-replatform/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}