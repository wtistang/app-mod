{"componentChunkName":"component---src-pages-labs-devops-labs-dv-0100-argocd-index-mdx","path":"/labs/devops-labs/dv0100-argocd/","result":{"pageContext":{"frontmatter":{"title":"ArgoCD Introduction","description":null},"relativePagePath":"/labs/devops-labs/dv0100-argocd/index.mdx","titleType":"page","MdxNode":{"id":"079cc33e-9252-50e6-8342-bccd434fd27c","children":[],"parent":"6f071f8e-df20-50ad-a207-9720d3fab019","internal":{"content":"---\ntitle: ArgoCD Introduction\ndescription: \n---\nThe goal of this session is to provide a hands-on experience with ArgoCD.\n\n### 1. Argocd Introduction\nContinuous Integration, Delivery, and Deployment are important devOps practices. These processes are valuable and ensures that the software is up to date timely.\n* Continuous Integration is an automation process which allows developers to integrate their work into a repository. When a developer pushes his work into the source code repository, it ensures that the software continues to work properly. It helps to enable collaborative development across the teams and also helps to identify the integration bugs sooner.\n* Continuous Delivery comes after Continuous Integration. It prepares the code for release. It automates the steps that are needed to deploy a build.\n* Continuous Deployment is the final step which succeeds Continuous Delivery. It automatically deploys the code whenever a code change is done. Entire process of deployment is automated.\n\nGitOps in short is a set of practices to use Git pull requests to manage infrastructure and application configurations. Git repository in GitOps is considered the only source of truth and contains the entire state of the system so that the trail of changes to the system state are visible and auditable.\n* Traceability of changes in GitOps is no novelty in itself as this approach is almost universally employed for the application source code. However GitOps advocates applying the same principles (reviews, pull requests, tagging, etc) to infrastructure and application configuration so that teams can benefit from the same assurance as they do for the application source code.\n* Although there is no precise definition or agreed upon set of rules, the following principles are an approximation of what constitutes a GitOps practice:\n\nArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes. Applications, application definitions, configurations, and environments should be declarative and version controlled. Also application deployment and lifecycle management should be automated, auditable, and easy to understand. All this can be done using Argo. Check these guides out if you want to know more about Argo - [Argo CD - Declarative GitOps CD for Kubernetes](https://argoproj.github.io/argo-cd/).\n\n### 2. Objective\n\nThe objectives of this lab are to help you:\n\n* learn how to deploy application to OCP cluster using ArgoCD UI\n* learn how to work with ArgoCD in command line\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n* Have a GitHub account\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tpush the app code to a GitHub repo\n* create an OCP cluster project\n* create a ArgoCD project in ArgoCD UI\n* deploy a sample app to the OCP cluster from ArgoCD UI\n* work with the ArgoCD from command line\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n\n#### 6.2 Push app code to a GitHub repo\nAssuming that your devleopment team has the application code ready.  You need to first push it to your GitHub repo in order to deploy it to the OCP cluster.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the **GitHub** bookmark to open it.\n\n  ![](images/github-bookmark.png) \n3. Login with your GihHub credientials.\n4. Cick **New** to crate a new GitHub repo.\n\n  ![](images/github-new-repo.png)\n5. Enter the new repo name as: **cloudnative_sample_app_deploy** and click **Create Repository**.\n  ![](images/github-create-myrepo.png)\n\n  You repo is now created.\n\n  ![](images/github-myrepo.png)\n  You will use some of the commands highlighted above to push your application code to the repo.\n6. Open a terminal window by clicing its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n\n2. Navigate to the application code direcotry.\n\n  ```\n  cd /home/ibmdemo/app-mod-labs/dv0100st/cloudnative_sample_app_deploy\n  ```\n3. View the contents in this directory.\n\n  ```\n  ls -l\n  ```\n  ```\n  total 16\n  drwx------ 3 ibmdemo ibmdemo 4096 Aug 21  2020 chart\n  drwx------ 2 ibmdemo ibmdemo 4096 Aug 21  2020 kubernetes\n  drwx------ 2 ibmdemo ibmdemo 4096 Jul 14 10:33 openshift\n  -rw-rw-r-- 1 ibmdemo ibmdemo   83 Aug 21  2020 README.md\n  ```\n4.  The deployment artifacts for OCP cluster in under the **openshift** directory.  View its contents.\n\n  ```\n  ls -l openshift/\n  ```\n\n  ```\n  total 12\n  -rw-rw-r-- 1 ibmdemo ibmdemo 915 Aug 21  2020 deployment.yaml\n  -rw-rw-r-- 1 ibmdemo ibmdemo 244 Jul 14 10:33 route.yaml\n  -rw-rw-r-- 1 ibmdemo ibmdemo 243 Aug 21  2020 service.yaml\n  ```\n\n  As you can see, there are YAML files representing the deployment, service and route configurations.\n6. Run the git commands to push the application code to your GitHub repo. Note that you have to use your own GitHub repo URL in the command below.\n\n  ```\n  git init\n  git add .\n  git commit -m \"first commit\"\n  git branch -M main\n  git remote add origin https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  git push -u origin main\n  ```\n  ```\n  [master (root-commit) 6fd8905] first commit\n  14 files changed, 297 insertions(+)\n  create mode 100644 .gitignore\n  create mode 100644 README.md\n  create mode 100644 chart/cloudnativesampleapp/Chart.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/basedeployment.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/deployment.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/hpa.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/istio.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/service.yaml\n  create mode 100644 chart/cloudnativesampleapp/values.yaml\n  create mode 100644 kubernetes/deployment.yaml\n  create mode 100644 kubernetes/service.yaml\n  create mode 100644 openshift/deployment.yaml\n  create mode 100644 openshift/route.yaml\n  create mode 100644 openshift/service.yaml\n  ```\n  When prompted, enter your GitHub credentials.\n\n  ```\n  Username for 'https://github.com': wtistang\n  Password for 'https://wtistang@github.com': \n  Counting objects: 19, done.\n  Delta compression using up to 12 threads.\n  Compressing objects: 100% (17/17), done.\n  Writing objects: 100% (19/19), 3.31 KiB | 1.66 MiB/s, done.\n  Total 19 (delta 2), reused 0 (delta 0)\n  remote: Resolving deltas: 100% (2/2), done.\n  To https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  ...\n  Branch 'main' set up to track remote branch 'main' from 'origin'.\n  ```\n4. When it is done, refresh your GitHub page, you will see something like this:\n\n  ![](images/github-myrepo-uploaded.png)\n  \n  You have pushed your application code to your GitHub repo.\n\n#### 6.3 Deploy application in ArgoCD UI\n\n##### 6.3.1 Create a new project in OCP Cluster\nYou are going to create a new proejct in OCP Cluster so you can deploy the application to the project.\n\n1. From the termical window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when promted, enter the login credientials as: **ibmadmin**/**engageibm**.\n  \n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n2. Create a new project **dv0100st** in OCP Cluster with command:\n\n  ```\n  oc new-project dv0100st\n  ```\n##### 6.3.2 Get ArgoCD login information from the OCP cluster\nArgoCD can be install to the OpenShift Container Platform (OCP) clsuter with ArgoCD operator or from the command line.  \n\nIn this lab environment, the ArgoCD is installled to the OCP cluster using IBM Cloud Native Toolkit. The Cloud-Native Toolkit is an open-source collection of assets that enable application development and support teams to deliver business value quickly using Red Hat OpenShift or IBM Cloud-managed Kubernetes. This guide provides information to help Developers, Administrators, and Site Reliability Engineers use the Toolkit to support delivering business applications through the entire Software Development Life Cycle (SDLC). Click the link to learn more about the [Cloud Native Toolkit](https://cloudnativetoolkit.dev).\n\nTo access the ArgoCD, you need to get its server and login credientals information from the OCP Clsuter.\n\n1. Get ArgoCD username info:\n\n  ```\n  export ARGOCD_USER=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_USER}' | base64 -d)\n  echo $ARGOCD_USER\n  ```\n2. Get ArgoCD password info:\n  ```\n  export ARGOCD_PASSWORD=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_PASSWORD}' | base64 -d)\n  echo $ARGOCD_PASSWORD\n  ```\n3. Get AroCD server info:\n  \n  ```\n  export ARGOCD_URL=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_URL}' | base64 -d)\n  export ARGOCD_SERVER=$(echo $ARGOCD_URL|sed -E 's/^\\s*.*:\\/\\///g')\n  echo $ARGOCD_SERVER\n  ```\n4. Write down the ArgoCD username, password and server information.  You will use them to login to the ArgoCD server from the ArgoCD UI and from the commandline.\n\n##### 6.3.3 Create a ArgoCD project in ArgoCD UI\n\nThe ArgoCD project is not a kubernetes or ocp project/namespace, it is an Argocd resource which is a parent of the Argocd application. The default ArgiCD project is **default**. In this lab, you are going to create to new ArgoCD project **dk0100st** to host the ArgoCD application.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the Could Native Toolkit **Developer Dashboard** bookmark to open it.\n\n  ![](images/toolkit-bookmark.png) \n  \n3. Click **Open with OpenShift** to cotinue.\n\n  ![](images/login-with-ocp.png)\n\n4. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The IBM Cloud Native Toolkit Developer Dashboard page is displayed. \n  \n  ![](images/toolkit-page.png)\n\n4. Click the ArgoCD link to access the ArgoCD UI\n\n  ![](images/argocd-link.png) \n\n  The ArgoCD page is dispalyed.\n\n  ![](images/argocd-ui-page.png)\n\n5. Login with the username and password with the information you obtained above and click **SIGN IN**.\n\n  ![](images/argocd-ui-login.png)\n6. From the ArgoCD Home page, click **Settings**, then click **Projects**.\n\n  ![](images/argocd-settings.png)\n7. Click **New Project**\n\n  ![](images/argocd-new-project.png)\n\n8. Enter the project Name and Description as: **dv0100st** and click **Create**.\n\n  ![](images/argocd-new-project-2.png)\n\n  The ArgoCD project/namespace is created\n\n  ![](images/argocd-project-created.png)\n\n9. Click the project link to access its details.\n\n  ![](images/argocd-project-link.png)\n\n10. Click the **Edit** on the **RESOURCE REPOSITOIES**\n\n  ![](images/argocd-edit-resource-repos.png)\n  \n11. In the **RESOURCE REPOSITOIES** page, click **Add Resource** link.\n\n  ![](images/argocd-add-resource.png)\n\n12. Click **Save** to save the change.\n\n  ![](images/argocd-resource-added.png)\n13. Repeat the similar **EDIT** process to add resources to **DESTINATIONS** and **CLUSTER RESOURCE ALLOW LIST**. When you are done, your project settings should look like this:\n\n  ![](images/argocd-edit-completed.png)\n\n##### 6.3.4 Deploy app through ArgoCD UI\n1. From the ArgoCD UI, click the **Manage** icon on the navigation bar, then click **NEW APP** to create a new deployment.\n\n  ![](images/argocd-manage-icon.png)\n  \n  ![](images/argocd-new-app.png)\n\n2. Add the following details and click **Create** to finish.  Note: you should replace the GitHub repo URL with your own URL.\n  * Application Name: **sample**\n  * Project: **dv0100st**\n  * SYNC POLICY: **Manual**\n  * REPO URL: **https://github.com/wtistang/cloudnative_sample_app_deploy.git**\n  * Revision: **HEAD**\n  * Path: **openshift**\n  * Cluster: **https://kubernetes.default.svc** \n  * Namespace: **dv0100st**\n\n  ![](images/argocd-create.png)\n\n  The distination namesapce is the OCP cluster project you created before.\n\n  You will now see the available apps. Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\n   ![](images/argocd-created.png)\n\n8. To sync the application, click **SYNC** and then click **SYNCHRONIZE**.\n\n  ![](images/argocd-sync.png)\n\n  Once the sync is done, the deployment process gets started. Wait till the app is deployed.\n\n  ![](images/argocd-processing.png)\n\n9. Once the app is deployed, click on it to see the details.\n\n  ![](images/argocd-app-ready.png)\n\n10. In the **APPLICATION DETAILS** page, click each deployment block to view its detail information.\n\n  ![](images/argocd-view-deployment.png)\n\n##### 6.2.3 Verify and update the deployment\nAccess the app to verify if it is correctly deployed.\n\n1. Go back to the terminal window, list the **cloudnativesampleapp-service** route with command.\n\n  ```\n  oc get route -n dv0100st\n  ```\n  ```\n  No resources found in dv0100st namespace.\n  ```\n  You get the message indicating that there is no route available in the project, that means the route configuration is not right.  This needs to be fixed.\n\n2. Click the **File Manager** icon on the Desktop toolbar, navigate to **/home/ibmdemo/app-mod-labs/dv0100st/cloudnative_sample_app_deploy/openshift/** directory and double-click the **route.yaml** file to open it for edit.\n\n  ![](images/open-route-yaml.png)\n  \n  ![](images/route-yaml-asis.png)\n\n  As you can see from the YAML file, it is hard-coded to use namespace **default**, that is why no route was created in the **dv0100st** project. This can be fixed.\n3. Delete the line **namespace: default** in the file and clikc **Save** to save the change.\n\n  ![](images/route-yaml-updated.png)\n4. Next you need to push the change to your GitHub repo with commands:\n\n  ```\n  git add .\n  git commit -m \"change commit\"\n  git push -u origin main\n  ```\n5. Go to to your ArgoCD **simple** application and click **SYNC** > **SYNCHRONIZE**.\n\n  ![](images/argocd-sync-2.png)\n  \n  The ArgoCD will sync the application with your GitHub repo to get the latest changes and update the deployment.\n6. Go back to the terminal window, list the **cloudnativesampleapp-service** route with command.\n\n  ```\n  oc get route -n dv0100st\n  ```  \n  This time it should reruen a hostname under **HOST/PORT** column\n\n  ```\n  NAME                 HOST/PORT                                         PATH   SERVICES                       PORT   TERMINATION   WILDCARD\n  cloudnative-sample   cloudnative-sample-default.apps.demo.ibmdte.net          cloudnativesampleapp-service   9080                 None\n  ```\n\n7. Set an environment variable **APP_URL** using the **HOST/PORT**.\n\n  ```\n  export APP_URL=\"http://$(oc get route cloudnative-sample -o jsonpath='{.status.ingress[0].host}')\"\n  echo $APP_URL\n  ```\n  \n  The output is:\n\n  ```\n  http://cloudnative-sample-default.apps.demo.ibmdte.net\n  ```\n  \n8. Access the app url using curl:\n\n  ```\n  curl \"$APP_URL/greeting?name=Carlos\"\n  ```\n  \n  The output is:\n  \n  ```\n  {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n  ```\n\n  You have verified that the deployment is successful.\n#### 6.3 Using the ArgoCD CLI\n1. Login using the cli.\n\n  ```\n  argocd login --username $ARGOCD_USER --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n  ```\n2. when you see the message like this, type **y** and press **ENTER** to continue.\n\n  ```\n  WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain any IP SANs. Proceed insecurely (y/n)? y\n\n  'admin' logged in successfully\n  ```\n3. List the applications\n\n  ```\n  argocd app list\n  ```\n  \n  The output is like this:\n  ```\n  NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n  sample  https://kubernetes.default.svc  dv0100st    dv0100st  Synced  Healthy  <none>      <none>      https://github.com/wtistang/cloudnative_sample_app_deploy.git  openshift  HEAD\n  ```\n4. Get application details\n\n  ```\n  argocd app get sample\n  ```\n  \n  The output is like this:\n  ```\n  Name:               sample\n  Project:            dv0100st\n  Server:             https://kubernetes.default.svc\n  Namespace:          dv0100st\n  URL:                https://10.97.240.99/applications/sample\n  Repo:               https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  Target:             HEAD\n  Path:               openshift\n  SyncWindow:         Sync Allowed\n  ```\n\n5. Show application deployment history\n\n  ```\n  argocd app history sample\n  ```\n  \n  The output is like this:\n  ```\n  ID  DATE                           REVISION\n  0   2021-02-12 21:10:32 -0500 EST  HEAD (9684037)\n  ```\n\n### 7.\tSummary\nIn this lab, you have learned some basic features and functions of ArgoCD and how to use it. To learn more about App Mod and DevOps, please continue with the rest of the lab series.\n\n**Congratulations! You have successfully completed ArgoCD Introduction Lab!**\n\n","type":"Mdx","contentDigest":"d57848019da0face9149e71480cd4ab6","owner":"gatsby-plugin-mdx","counter":1721},"frontmatter":{"title":"ArgoCD Introduction","description":null},"exports":{},"rawBody":"---\ntitle: ArgoCD Introduction\ndescription: \n---\nThe goal of this session is to provide a hands-on experience with ArgoCD.\n\n### 1. Argocd Introduction\nContinuous Integration, Delivery, and Deployment are important devOps practices. These processes are valuable and ensures that the software is up to date timely.\n* Continuous Integration is an automation process which allows developers to integrate their work into a repository. When a developer pushes his work into the source code repository, it ensures that the software continues to work properly. It helps to enable collaborative development across the teams and also helps to identify the integration bugs sooner.\n* Continuous Delivery comes after Continuous Integration. It prepares the code for release. It automates the steps that are needed to deploy a build.\n* Continuous Deployment is the final step which succeeds Continuous Delivery. It automatically deploys the code whenever a code change is done. Entire process of deployment is automated.\n\nGitOps in short is a set of practices to use Git pull requests to manage infrastructure and application configurations. Git repository in GitOps is considered the only source of truth and contains the entire state of the system so that the trail of changes to the system state are visible and auditable.\n* Traceability of changes in GitOps is no novelty in itself as this approach is almost universally employed for the application source code. However GitOps advocates applying the same principles (reviews, pull requests, tagging, etc) to infrastructure and application configuration so that teams can benefit from the same assurance as they do for the application source code.\n* Although there is no precise definition or agreed upon set of rules, the following principles are an approximation of what constitutes a GitOps practice:\n\nArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes. Applications, application definitions, configurations, and environments should be declarative and version controlled. Also application deployment and lifecycle management should be automated, auditable, and easy to understand. All this can be done using Argo. Check these guides out if you want to know more about Argo - [Argo CD - Declarative GitOps CD for Kubernetes](https://argoproj.github.io/argo-cd/).\n\n### 2. Objective\n\nThe objectives of this lab are to help you:\n\n* learn how to deploy application to OCP cluster using ArgoCD UI\n* learn how to work with ArgoCD in command line\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n* Have a GitHub account\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tpush the app code to a GitHub repo\n* create an OCP cluster project\n* create a ArgoCD project in ArgoCD UI\n* deploy a sample app to the OCP cluster from ArgoCD UI\n* work with the ArgoCD from command line\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n\n#### 6.2 Push app code to a GitHub repo\nAssuming that your devleopment team has the application code ready.  You need to first push it to your GitHub repo in order to deploy it to the OCP cluster.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the **GitHub** bookmark to open it.\n\n  ![](images/github-bookmark.png) \n3. Login with your GihHub credientials.\n4. Cick **New** to crate a new GitHub repo.\n\n  ![](images/github-new-repo.png)\n5. Enter the new repo name as: **cloudnative_sample_app_deploy** and click **Create Repository**.\n  ![](images/github-create-myrepo.png)\n\n  You repo is now created.\n\n  ![](images/github-myrepo.png)\n  You will use some of the commands highlighted above to push your application code to the repo.\n6. Open a terminal window by clicing its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n\n2. Navigate to the application code direcotry.\n\n  ```\n  cd /home/ibmdemo/app-mod-labs/dv0100st/cloudnative_sample_app_deploy\n  ```\n3. View the contents in this directory.\n\n  ```\n  ls -l\n  ```\n  ```\n  total 16\n  drwx------ 3 ibmdemo ibmdemo 4096 Aug 21  2020 chart\n  drwx------ 2 ibmdemo ibmdemo 4096 Aug 21  2020 kubernetes\n  drwx------ 2 ibmdemo ibmdemo 4096 Jul 14 10:33 openshift\n  -rw-rw-r-- 1 ibmdemo ibmdemo   83 Aug 21  2020 README.md\n  ```\n4.  The deployment artifacts for OCP cluster in under the **openshift** directory.  View its contents.\n\n  ```\n  ls -l openshift/\n  ```\n\n  ```\n  total 12\n  -rw-rw-r-- 1 ibmdemo ibmdemo 915 Aug 21  2020 deployment.yaml\n  -rw-rw-r-- 1 ibmdemo ibmdemo 244 Jul 14 10:33 route.yaml\n  -rw-rw-r-- 1 ibmdemo ibmdemo 243 Aug 21  2020 service.yaml\n  ```\n\n  As you can see, there are YAML files representing the deployment, service and route configurations.\n6. Run the git commands to push the application code to your GitHub repo. Note that you have to use your own GitHub repo URL in the command below.\n\n  ```\n  git init\n  git add .\n  git commit -m \"first commit\"\n  git branch -M main\n  git remote add origin https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  git push -u origin main\n  ```\n  ```\n  [master (root-commit) 6fd8905] first commit\n  14 files changed, 297 insertions(+)\n  create mode 100644 .gitignore\n  create mode 100644 README.md\n  create mode 100644 chart/cloudnativesampleapp/Chart.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/basedeployment.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/deployment.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/hpa.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/istio.yaml\n  create mode 100644 chart/cloudnativesampleapp/templates/service.yaml\n  create mode 100644 chart/cloudnativesampleapp/values.yaml\n  create mode 100644 kubernetes/deployment.yaml\n  create mode 100644 kubernetes/service.yaml\n  create mode 100644 openshift/deployment.yaml\n  create mode 100644 openshift/route.yaml\n  create mode 100644 openshift/service.yaml\n  ```\n  When prompted, enter your GitHub credentials.\n\n  ```\n  Username for 'https://github.com': wtistang\n  Password for 'https://wtistang@github.com': \n  Counting objects: 19, done.\n  Delta compression using up to 12 threads.\n  Compressing objects: 100% (17/17), done.\n  Writing objects: 100% (19/19), 3.31 KiB | 1.66 MiB/s, done.\n  Total 19 (delta 2), reused 0 (delta 0)\n  remote: Resolving deltas: 100% (2/2), done.\n  To https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  ...\n  Branch 'main' set up to track remote branch 'main' from 'origin'.\n  ```\n4. When it is done, refresh your GitHub page, you will see something like this:\n\n  ![](images/github-myrepo-uploaded.png)\n  \n  You have pushed your application code to your GitHub repo.\n\n#### 6.3 Deploy application in ArgoCD UI\n\n##### 6.3.1 Create a new project in OCP Cluster\nYou are going to create a new proejct in OCP Cluster so you can deploy the application to the project.\n\n1. From the termical window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when promted, enter the login credientials as: **ibmadmin**/**engageibm**.\n  \n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n2. Create a new project **dv0100st** in OCP Cluster with command:\n\n  ```\n  oc new-project dv0100st\n  ```\n##### 6.3.2 Get ArgoCD login information from the OCP cluster\nArgoCD can be install to the OpenShift Container Platform (OCP) clsuter with ArgoCD operator or from the command line.  \n\nIn this lab environment, the ArgoCD is installled to the OCP cluster using IBM Cloud Native Toolkit. The Cloud-Native Toolkit is an open-source collection of assets that enable application development and support teams to deliver business value quickly using Red Hat OpenShift or IBM Cloud-managed Kubernetes. This guide provides information to help Developers, Administrators, and Site Reliability Engineers use the Toolkit to support delivering business applications through the entire Software Development Life Cycle (SDLC). Click the link to learn more about the [Cloud Native Toolkit](https://cloudnativetoolkit.dev).\n\nTo access the ArgoCD, you need to get its server and login credientals information from the OCP Clsuter.\n\n1. Get ArgoCD username info:\n\n  ```\n  export ARGOCD_USER=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_USER}' | base64 -d)\n  echo $ARGOCD_USER\n  ```\n2. Get ArgoCD password info:\n  ```\n  export ARGOCD_PASSWORD=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_PASSWORD}' | base64 -d)\n  echo $ARGOCD_PASSWORD\n  ```\n3. Get AroCD server info:\n  \n  ```\n  export ARGOCD_URL=$(oc get secret argocd-access -n tools -o jsonpath='{.data.ARGOCD_URL}' | base64 -d)\n  export ARGOCD_SERVER=$(echo $ARGOCD_URL|sed -E 's/^\\s*.*:\\/\\///g')\n  echo $ARGOCD_SERVER\n  ```\n4. Write down the ArgoCD username, password and server information.  You will use them to login to the ArgoCD server from the ArgoCD UI and from the commandline.\n\n##### 6.3.3 Create a ArgoCD project in ArgoCD UI\n\nThe ArgoCD project is not a kubernetes or ocp project/namespace, it is an Argocd resource which is a parent of the Argocd application. The default ArgiCD project is **default**. In this lab, you are going to create to new ArgoCD project **dk0100st** to host the ArgoCD application.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n2. From the browser window, click the Could Native Toolkit **Developer Dashboard** bookmark to open it.\n\n  ![](images/toolkit-bookmark.png) \n  \n3. Click **Open with OpenShift** to cotinue.\n\n  ![](images/login-with-ocp.png)\n\n4. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The IBM Cloud Native Toolkit Developer Dashboard page is displayed. \n  \n  ![](images/toolkit-page.png)\n\n4. Click the ArgoCD link to access the ArgoCD UI\n\n  ![](images/argocd-link.png) \n\n  The ArgoCD page is dispalyed.\n\n  ![](images/argocd-ui-page.png)\n\n5. Login with the username and password with the information you obtained above and click **SIGN IN**.\n\n  ![](images/argocd-ui-login.png)\n6. From the ArgoCD Home page, click **Settings**, then click **Projects**.\n\n  ![](images/argocd-settings.png)\n7. Click **New Project**\n\n  ![](images/argocd-new-project.png)\n\n8. Enter the project Name and Description as: **dv0100st** and click **Create**.\n\n  ![](images/argocd-new-project-2.png)\n\n  The ArgoCD project/namespace is created\n\n  ![](images/argocd-project-created.png)\n\n9. Click the project link to access its details.\n\n  ![](images/argocd-project-link.png)\n\n10. Click the **Edit** on the **RESOURCE REPOSITOIES**\n\n  ![](images/argocd-edit-resource-repos.png)\n  \n11. In the **RESOURCE REPOSITOIES** page, click **Add Resource** link.\n\n  ![](images/argocd-add-resource.png)\n\n12. Click **Save** to save the change.\n\n  ![](images/argocd-resource-added.png)\n13. Repeat the similar **EDIT** process to add resources to **DESTINATIONS** and **CLUSTER RESOURCE ALLOW LIST**. When you are done, your project settings should look like this:\n\n  ![](images/argocd-edit-completed.png)\n\n##### 6.3.4 Deploy app through ArgoCD UI\n1. From the ArgoCD UI, click the **Manage** icon on the navigation bar, then click **NEW APP** to create a new deployment.\n\n  ![](images/argocd-manage-icon.png)\n  \n  ![](images/argocd-new-app.png)\n\n2. Add the following details and click **Create** to finish.  Note: you should replace the GitHub repo URL with your own URL.\n  * Application Name: **sample**\n  * Project: **dv0100st**\n  * SYNC POLICY: **Manual**\n  * REPO URL: **https://github.com/wtistang/cloudnative_sample_app_deploy.git**\n  * Revision: **HEAD**\n  * Path: **openshift**\n  * Cluster: **https://kubernetes.default.svc** \n  * Namespace: **dv0100st**\n\n  ![](images/argocd-create.png)\n\n  The distination namesapce is the OCP cluster project you created before.\n\n  You will now see the available apps. Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\n   ![](images/argocd-created.png)\n\n8. To sync the application, click **SYNC** and then click **SYNCHRONIZE**.\n\n  ![](images/argocd-sync.png)\n\n  Once the sync is done, the deployment process gets started. Wait till the app is deployed.\n\n  ![](images/argocd-processing.png)\n\n9. Once the app is deployed, click on it to see the details.\n\n  ![](images/argocd-app-ready.png)\n\n10. In the **APPLICATION DETAILS** page, click each deployment block to view its detail information.\n\n  ![](images/argocd-view-deployment.png)\n\n##### 6.2.3 Verify and update the deployment\nAccess the app to verify if it is correctly deployed.\n\n1. Go back to the terminal window, list the **cloudnativesampleapp-service** route with command.\n\n  ```\n  oc get route -n dv0100st\n  ```\n  ```\n  No resources found in dv0100st namespace.\n  ```\n  You get the message indicating that there is no route available in the project, that means the route configuration is not right.  This needs to be fixed.\n\n2. Click the **File Manager** icon on the Desktop toolbar, navigate to **/home/ibmdemo/app-mod-labs/dv0100st/cloudnative_sample_app_deploy/openshift/** directory and double-click the **route.yaml** file to open it for edit.\n\n  ![](images/open-route-yaml.png)\n  \n  ![](images/route-yaml-asis.png)\n\n  As you can see from the YAML file, it is hard-coded to use namespace **default**, that is why no route was created in the **dv0100st** project. This can be fixed.\n3. Delete the line **namespace: default** in the file and clikc **Save** to save the change.\n\n  ![](images/route-yaml-updated.png)\n4. Next you need to push the change to your GitHub repo with commands:\n\n  ```\n  git add .\n  git commit -m \"change commit\"\n  git push -u origin main\n  ```\n5. Go to to your ArgoCD **simple** application and click **SYNC** > **SYNCHRONIZE**.\n\n  ![](images/argocd-sync-2.png)\n  \n  The ArgoCD will sync the application with your GitHub repo to get the latest changes and update the deployment.\n6. Go back to the terminal window, list the **cloudnativesampleapp-service** route with command.\n\n  ```\n  oc get route -n dv0100st\n  ```  \n  This time it should reruen a hostname under **HOST/PORT** column\n\n  ```\n  NAME                 HOST/PORT                                         PATH   SERVICES                       PORT   TERMINATION   WILDCARD\n  cloudnative-sample   cloudnative-sample-default.apps.demo.ibmdte.net          cloudnativesampleapp-service   9080                 None\n  ```\n\n7. Set an environment variable **APP_URL** using the **HOST/PORT**.\n\n  ```\n  export APP_URL=\"http://$(oc get route cloudnative-sample -o jsonpath='{.status.ingress[0].host}')\"\n  echo $APP_URL\n  ```\n  \n  The output is:\n\n  ```\n  http://cloudnative-sample-default.apps.demo.ibmdte.net\n  ```\n  \n8. Access the app url using curl:\n\n  ```\n  curl \"$APP_URL/greeting?name=Carlos\"\n  ```\n  \n  The output is:\n  \n  ```\n  {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n  ```\n\n  You have verified that the deployment is successful.\n#### 6.3 Using the ArgoCD CLI\n1. Login using the cli.\n\n  ```\n  argocd login --username $ARGOCD_USER --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n  ```\n2. when you see the message like this, type **y** and press **ENTER** to continue.\n\n  ```\n  WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain any IP SANs. Proceed insecurely (y/n)? y\n\n  'admin' logged in successfully\n  ```\n3. List the applications\n\n  ```\n  argocd app list\n  ```\n  \n  The output is like this:\n  ```\n  NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n  sample  https://kubernetes.default.svc  dv0100st    dv0100st  Synced  Healthy  <none>      <none>      https://github.com/wtistang/cloudnative_sample_app_deploy.git  openshift  HEAD\n  ```\n4. Get application details\n\n  ```\n  argocd app get sample\n  ```\n  \n  The output is like this:\n  ```\n  Name:               sample\n  Project:            dv0100st\n  Server:             https://kubernetes.default.svc\n  Namespace:          dv0100st\n  URL:                https://10.97.240.99/applications/sample\n  Repo:               https://github.com/wtistang/cloudnative_sample_app_deploy.git\n  Target:             HEAD\n  Path:               openshift\n  SyncWindow:         Sync Allowed\n  ```\n\n5. Show application deployment history\n\n  ```\n  argocd app history sample\n  ```\n  \n  The output is like this:\n  ```\n  ID  DATE                           REVISION\n  0   2021-02-12 21:10:32 -0500 EST  HEAD (9684037)\n  ```\n\n### 7.\tSummary\nIn this lab, you have learned some basic features and functions of ArgoCD and how to use it. To learn more about App Mod and DevOps, please continue with the rest of the lab series.\n\n**Congratulations! You have successfully completed ArgoCD Introduction Lab!**\n\n","fileAbsolutePath":"/Users/yitang/Downloads/app-mod/src/pages/labs/devops-labs/dv0100-argocd/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}