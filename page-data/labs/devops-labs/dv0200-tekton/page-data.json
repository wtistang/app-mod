{"componentChunkName":"component---src-pages-labs-devops-labs-dv-0200-tekton-index-mdx","path":"/labs/devops-labs/dv0200-tekton/","result":{"pageContext":{"frontmatter":{"title":"Using Tekton Pipelines","description":null},"relativePagePath":"/labs/devops-labs/dv0200-tekton/index.mdx","titleType":"page","MdxNode":{"id":"6664763d-e26e-5644-85dd-b3d86dd33017","children":[],"parent":"e456a1bc-9e6f-5db6-8b9b-db0b7566afdc","internal":{"content":"---\ntitle: Using Tekton Pipelines \ndescription: \n---\n\nTekton is a set of Kubernetes custom resource definitions (CRD) as standard constructs for creating Continuous Integration and Continuous Delivery (CI/CD) pipelines. \n\nThe following is a brief introduction to the Tekton CRDs. \n*\tTask: A sequence of commands (steps) that are run in separate containers in a pod\n*\tPipeline: A collection of tasks that are executed in a defined order\n*\tPipelineResource: Inputs (e.g. git repo) and outputs (e.g. image registry) to a pipeline\n*\tTaskRun: Runtime representation of an execution of a task\n*\tPipelineRun: Runtime representation of an execution of a pipeline\n\n![](images/tekton-crds.png)\n\nAs explained above, all objects within a Tekton pipeline are Kubernetes objects. \nPipelines have tasks, which are actually a CRD that runs a container. \nWithin the task you define steps, which are commands that you run inside the container. \nPipelines normally have resources associated with them, which can be accessed by all tasks within that pipeline. \nIt should be noted that tasks can be used within multiple pipelines, so it's good practice to use pipeline resources to define the resources used, such as GitHub repositories or docker hub image definitions.\n\n![](images/tekton-tasks.png)\n\nRed Hat OpenShift Pipelines is a cloud-native, continuous integration and continuous delivery (CI/CD) solution based on Kubernetes resources. It uses Tekton building blocks to automate deployments across multiple platforms by abstracting away the underlying implementation details. \n\t\nIn this lab exercise, you deploy a cloud native application to an OpenShift cluster using the Red Hat OpenShift Pipelines.\n\n### 1.\tBusiness Scenario\n\nThis lab covers the following business scenario:\n\nYour development team has created a cloud native NodeJS application and saved the application code in GitHub, now it is your responsibility to deploy the application to a Red Hat OpenShift Cluster Platform (OCP). You deploy a Tekton Pipeline along with Pipeline Resources, and two Task objects. The pipeline pulls the application source code from GitHub and build the Docker image. Once the image is built, the image is pushed to a local Image repository in a OCP cluster. Lastly, the pipeline runs the task that deploys this containerized application to the OpenShift (Kubernetes) runtime.\n\nHere is a diagram of what you are going to build in this lab.\n \n![](images/tekton-pipeline.png)\n\nThere are a few things you need to configure along with the pipeline, such as secrets and a service account. This lab guides you through all the steps, but you should take some time to learn more about the security roles that are associated with your service account which allow the service account user to push images to the OpenShift registry, and execute the pipeline resources.\n \n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tlearn how to create a pipeline task \n*\tlearn how to build a pipeline\n*\tlearn how to configure the OCP cluster to run the pipeline\n*\tlearn how to run the pipeline to deploy the application the OCP cluster\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tClone the Git repository used for this lab and explore the contents\n*\tLogin to OpenShift and create a new project for this lab\n*\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n*\tCreate Tekton Task\n*\tCreate the Deployment Task\n*\tCreate the Pipeline \n*\tRun the Pipeline\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. If this is your first time to run the lab series in this lab environment, do the following, otherwise if you have already downloaded the lab materials in other labs, you can skip this step.\n  \n  a. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/dv0200st** directory and double-click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-dv0200st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n\n#### 6.2\tClone the Git repository used for this lab and explore the contents\n\n1.\tFrom the terminal window clone the **tekton-lab** GitHub repository to the lab Workstation.\n    \n    a. From the terminal window, run the following commands to clone the **tekton-lab** repo:\n    \n    ```\n    cd /home/ibmdemo/app-mod-labs/dv0200st\n\tgit clone https://github.com/wtistang/tekton-lab.git\n\tcd tekton-lab\n    ```\n    \n    These commands above clone the public repo named **tekton-lab** to the local directory under **/home/ibmdemo/app-mod-labs/dv0200st/tekton-lab** directory. \n\n    b.\tList the directory contents using the **ls -l** command\n        \n    ```\n    ls -l\n\t```\n    \n    Sample output:\n    ```\n    ```\n\n    You find the following key resources: \n    *\tDockerfile – Used to build the NodeJS Express Application\n    *\tapp.js – The NodeJS Application\n    *\ttekton-pipeline (folder) – YAML files to create the Pipeline resources for this lab\n \n    In the GitHub repo, you find all the YAML files in the **tekton-pipeline** sub folder. \n\n3.\tEnter commands below to go to the Tekton-pipeline directory and list the contents.\n    ```\n    cd tekton-pipeline\n    ls -l\n    ```\n    \n    Sample output:\n    ```\n    ```\n\n    In the **tekton-lab/tekton-pipeline** directory, you find all the YAML files needed to create the Tekton pipeline resources to build and deploy a simple NodeJS Express application to OpenShift.\n \n    You find the following key resources: \n    *\tgit-resource.yaml – Creates the Pipeline resource that references the input GitHub repo that contains the source for the application to be built and deployed via the pipeline\n    *\timage-resource.yaml – Creates the Pipeline resource that references the output Docker image registry where the Docker image is pushed via the pipeline \n    *\ttask.yaml – Creates the build and push Tekton tasks\n    *\tpipeline.yaml – Creates the pipeline that invokes the tasks defined \n    *\toc-deploy.yaml – Creates the Tekton deployment Task to deploy the application to OpenShift\n    *\tdeployment.yaml – Invoked by the oc-deployment task to create the OpenShift Deployment, Service and Route for the application \n    *\tpipeline-run.yaml – Runtime execution of the pipeline to build and deploy the app\n\n \n#### 6.3\tLogin to OpenShift and create a new project from commandline\n\n1. From the terminal window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n\n2. Create a new project (namespace) named **tekton-lab**.\n\n    ```\n    oc new-project tekton-lab\n    ```\n\n    You see the message to confirm that the **tekton-lab** project is created.\n\n    Sample output:\n    ```\n    Now using project \"tekton-lab\" on server \"https://api.demo.ibmdte.net:6443\".\n\n    You can add applications to this project with the 'new-app' command. For example, try:\n\n        oc new-app rails-postgresql-example\n\n    to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n        kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n\n    ```\n\n\n#### 6.4\tView OpenShift Service Account\n\nOpenShift Pipelines have been installed on the OCP cluster using the Red Hat OpenShift Pipelines Operator. Red Hat OpenShift Pipelines Operator adds and configures a ServiceAccount named **pipeline** that has sufficient permissions to build and push an image. This ServiceAccount is used by PipelineRun.\n\n1. Create a new service account names tekton-sa in the **tekton-lab** project with command:\n\n    ```\n    oc get serviceaccounts -n tekton-lab\n\t``` \n\n    Sample output:\n    ```\n    NAME        SECRETS   AGE\n    pipeline    2         5m\n    ```\n\n#### 6.5\tCreate Secret with Login Token for the Service Account\n\nNext, create a new Kubernetes secret with the login token for the Service Account. This is needed by the account for an automated login for the deploy task of the pipeline. \n\nA two steps process is used to create the secret:\n*\tThe first command extracts the token from the **pipeline-token** secret and store it in a file (**token.txt**). \n*\tThe second command creates a new secret using that token. The deploy task uses the token within this secret to login and issue the deploy command during the pipeline.\n\n1. Run the following commands to create the new secret for the service account to login to OpenShift while running the Pipeline. \n\n    a. Get the token from the service account and store it in a file.\n\t\n    ```\n    oc get secret $(oc get secret -n tekton-lab | grep pipeline-token | head -1 | awk '{print $1}') -n tekton-lab -o jsonpath=\"{.data.token}\" | base64 -d > token.txt\n    ```\n\n    b. Verify the token was written to the token.txt file\n\n    ```\n    cat token.txt\n    ```\n    Sample output:\n    ```\n    eyJhbGciOiJSUzI1NiIsImtpZCI6IkhIc04tMkhJRkJDaXFjRFp2Uk1WamtWa3VnVFNFTDNJdWxJUHVzWnU4bFUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0ZWt0b24tbGFiIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InBpcGVsaW5lLXRva2VuLTU0OGg2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBpcGVsaW5lIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiN2UyMjcyNjAtZDRhYy00NTRiLWE1ZWYtNzZkMTdlZDhlYjJhIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnRla3Rvbi1sYWI6cGlwZWxpbmUifQ.H8e_tRRnvaGYUF98XF8dMURu10VvOeD7A4Obj4gDs3TxujANCCC5-3aCHiuVEEWDy3RoAfwjusWu3WOfz0g3n5Bm82lLao0DQt-_22w24GtLVNJ5FCZrNg0TqFJ5_1i8em2Si06MpgxQeKy96aAYdRHpLoN2omE5Q1J9VmS6sV17AvF2KcywFfAGEmBaCOXF1LcLX-4Op3tstONejE370JJVdxL-lWm19E2qymS8mMuCTIBWF4-0X_ZSgV2O-iJmHeKUjAYizbPkq74M5EW1QAPsd0D_ApvzIE5JOr5wHtoVHaKIJoMuWrl3L3i-aNRrmDhaTBTWQe2b0GHsK51FaA\n    ```\n\n    c. Create a new secret **tekton-lab-deployer-secret** with the token extracted from the service account\n\t\n    ```\n    oc create secret generic tekton-lab-deployer-secret --from-literal=user=sa --from-file=token=token.txt -n tekton-lab\n    ```\n    \n    d. Verify the new secret with command:\n    \n    ```\n    oc describe secret tekton-lab-deployer-secret -n tekton-lab\n    ```\n    \n    Sample output:\n    ```\n    Name:         tekton-lab-deployer-secret\n    Namespace:    tekton-lab\n    Labels:       <none>\n    Annotations:  <none>\n\n    Type:  Opaque\n\n    Data\n    ====\n    user:   2 bytes\n    token:  912 bytes\n\n    ```\n\n\n#### 6.6 Create the Tekton PipelineResources for the Applications Build and Deployment\n\nNext, you define two PipelineResources to be used by the Tekton pipeline:\n*\tgit-resource.yaml creates a Tekton PipelineResource identifying the GitHub repository from which the pipeline pulls its data during a build.\n*\timg-resource.yaml creates a Tekton PipelineResource identifying the image location.  The tag for that image must be changed every time the application is updated, and the pipeline executed. \n\n1. Ensure the terminal window is in the **/home/ibmdemo/app-mod-labs/dv0200st/tekton-lab/tekton-pipeline** directory, where the pipeline YAML files are located. \n\n    ```\n    cd /home/ibmdemo/app-mod-labs/dv0200st/tekton-lab/tekton-pipeline\n    ```\n2. Review the contents of **git-resource.yaml** file. \n\n    ```\n    cat git-resource.yaml \n    ```\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n    name: tekton1-git\n    spec:\n    type: git\n    params:\n        - name: revision\n        value: master\n        - name: url\n        value: https://github.com/wtistang/tekton-lab.git\n\n    ```\n    As you can see:\n    * The name of the PipelineResource is **tekton1-git**\n    * The source type is **git**\n    * The url to the source git repo is defined in the “url” parameter. \n\n3. Review the contents of **img-resource.yaml** file.\n\n    ```\n\tcat img-resource.yaml \n    ```\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n    name: tekton1-image\n    spec:\n    type: image\n    params:\n        - name: url\n        value: image-registry.openshift-image-registry.svc:5000/tekton-lab/tekton1:latest\n    ```\n    As you can see:\n    * The name of the PipelineResource is **tekton1-image**\n    * The type is **image**\n    * The url parameter defines the location of the image registry where the built image is pushed during the execution of the pipeline. \n\n4. Run the following commands to create the PipelineResources using the YAML files\n\n    ```\n\toc create -f git-resource.yaml -n tekton-lab\n\toc create -f img-resource.yaml -n tekton-lab\n    ```\n    \n5. List the new PipelineResources \n\n    ```\t\n    oc get pipelineresources -n tekton-lab\n    ```\n\n    Sample output:\n    ```\n    NAME            AGE\n    tekton1-git     42s\n    tekton1-image   40s\n    ```\n\n#### 6.7\tCreate the Build Tekton Task\nYou have created the PipelineResources, which define the input and output for the build and created a Service account with the proper privileges and roles, and credentials to run the pipeline, push images to the image registry, and deploy pods to OpenShift. \n\nIn this task, you create a Tekton task to build the Docker image, and push the image to the OpenShift Image Registry\n\nThe Tekton task you are ready to create contains two steps: \n*\tbuild the Docker image from the source GitHub repo\n*\tpushes the image to the OpenShift image registry\n\nNote: There are different ways to build a Docker image inside a task, for this lab, you use buildah to build your application Docker image (https://buildah.io/).\nBuildah is a command-line tool for building Open Container Initiative-compatible (that means Docker- and Kubernetes-compatible, too) images quickly and easily. It is easy to incorporate into scripts and build pipelines.\n\n1. Review the **task.yaml** file using cat command. \n\n    ```\n    cat task.yaml\n    ```\n    \n    Sample output:\n    ```\n    ---\n    apiVersion: tekton.dev/v1alpha1\n    kind: Task\n    metadata:\n    name: buildah\n    spec:\n    inputs:\n        params:\n        - name: BUILDER_IMAGE\n        description: The location of the buildah builder image.\n        default: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        description: Path to the Dockerfile to build.\n        default: ./Dockerfile\n        - name: TLSVERIFY\n        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)\n        default: \"false\"\n        resources:\n        - name: tekton1-git\n        type: git\n    outputs:\n        resources:\n        - name: tekton1-image\n        type: image\n    steps:\n    - name: build\n        image: quay.io/buildah/stable:v1.11.0\n        workingDir: /workspace/tekton1-git\n        command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--format=docker', '-f', '$(inputs.params.DOCKERFILE)', '-t', '$(outputs.resources.tekton1-image.url)', '.']\n        volumeMounts:\n        - name: varlibcontainers\n        mountPath: /var/lib/containers\n        securityContext:\n        privileged: true\n    - name: push\n        image: quay.io/buildah/stable:v1.11.0\n        workingDir: /workspace/tekton1-git\n        command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.tekton1-image.url)', 'docker://$(outputs.resources.tekton1-image.url)']\n        volumeMounts:\n        - name: varlibcontainers\n        mountPath: /var/lib/containers\n        securityContext:\n        privileged: true\n    volumes:\n    - name: varlibcontainers\n        emptyDir: {}\n\n    ```\n    The Task resource defines its spec as illustrated below:\n    *\tThe input resource\n    *\tThe output resource\n    *\tLocal parameters used during the execution of the task\n    *\tSteps. In this lab, **build** and **push** are described. In general, steps are used to isolate individual commands.\n    *\tThe image used for the task execution. It is quay.io/buildah/stable.\n    *\tIts environment. The env variables are defined, based on configmap and/or secret. Here, a secret is used to define the authentication information.\n    *\tThe commands to execute in the **build** and **push** steps. The first one builds the image, the second pushes it to the target repository. \n\n\n2. You create the Task using the **task.yaml** file, then list the new **buildah** task. \n\n    ```\n    oc create -f ./task.yaml -n tekton-lab\n\toc get tasks\n    ```\n    \n    Sample output:\n    ```\n    task.tekton.dev/buildah created\n    ....\n    NAME      AGE\n    buildah   2s\n\n    ```\n\n#### 6.8\tCreate the Deployment Task\nTo manage the deployment of this simple NodeJs Express application, tasks are needed to specify a Deployment (controller for pods) and a Service definition in OpenShift. \n\nThe **oc-deployment.yaml** file defines a Tekton Task that in turn invokes a command to run the **deployment.yaml** to create the deployment, service and route for the sample application. To enable this action, the task defines with a step using the quay.io/openshift/origin-cli:latest docker image.\n\n1. Review the **oc-deploy.yaml**  file using cat command. \n\n    ```\n    cat oc-deploy.yaml\n    ```\n\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: Task\n    metadata:\n    name: deploy-cm\n    spec:\n    inputs:\n        resources:\n        - name: tekton1-git\n            type: git\n        params:\n        - name: pathToContext\n            type: string\n            default: /workspace/tekton1-git\n        - name: targetNamespace\n            type: string\n            default: tekton-lab\n    steps:\n        - name: oc-service\n        image: quay.io/openshift/origin-cli:latest\n        env:\n            - name: REG_PWD\n            valueFrom:\n                secretKeyRef:\n                name: tekton-lab-deployer-secret\n                key: token\n        command: [\"/bin/bash\", \"-c\"]\n        args:\n            - oc apply -f /workspace/tekton1-git/tekton-pipeline/deployment.yaml --token=$REG_PWD -n $(inputs.params.targetNamespace)\n\n    ```\n\n2. Review the **deployment.yaml** file that is used to create the **Deployment** and **Service** for the application, and is invoked by the **deploy-cm** task you reviewed in the previous step  \n\n    ```\n    cat deployment.yaml\n\t```\n    Sample output:\n    ```\n    ---\n    # This the deployment YAML\n\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    labels:\n        app: tekton1\n    name: tekton1\n    spec:\n    replicas: 1\n    selector:\n        matchLabels:\n        app: tekton1\n    strategy: {}\n    template:\n        metadata:\n        creationTimestamp: null\n        labels:\n            app: tekton1\n        spec:\n        containers:\n        - image: image-registry.openshift-image-registry.svc:5000/tekton-lab/tekton1:latest\n            name: tekton1\n            resources: {}\n    status: {}\n    ---\n    # This the service yaml\n\n    apiVersion: v1\n    kind: Service\n    metadata:\n    labels:\n        app: tekton1\n    name: tekton1-svc\n    spec:\n    ports:\n        - port: 3000\n        protocol: TCP\n        targetPort: 3000\n    selector:\n        app: tekton1\n    type: LoadBalancer\n    ---\n    # This the route yaml\n\n    apiVersion: v1\n    kind: Route\n    apiVersion: route.openshift.io/v1\n    metadata:\n    name: tekton1-rou\n    labels:\n        app: tekton1\n    spec:\n    host: tekton1.apps.demo.ibmdte.net\n    to:\n        kind: Service\n        name: tekton1-svc\n        weight: 100\n    port:\n        targetPort: 3000\n    wildcardPolicy: None\n\n    ```\n    \n    In this YAML file:\n    * The **Deployment** specifies **1** replica (pod), and is deployed using the Docker image that is pushed to the OpenShift image registry. \n    * The **Service** defines how the application is accessed internally.\n    * The **Route** defines how the application is be accessed publicly.\n\n\n3. Run the oc-deploy.yaml to create the Tekton **Deployment** task. Then list the new task\n    ```\n    oc create -f ./oc-deploy.yaml -n tekton-lab\n\toc get tasks\n    ```\n\n   Sample output:\n    ```\n    task.tekton.dev/deploy-cm created\n    ....\n    NAME        AGE\n    buildah     5m47s\n    deploy-cm   3s\n    ```\n#### 6.9\tCreate the Pipeline \n\nNow that that tasks have been created, they can be incorporated and orchestrated in a Pipeline. In this task, you create the Tekton pipeline which invokes the **build/push** and **deploy** tasks you created.\n\nThe pipeline does the following: \n*\tFirst, the pipeline runs the **buildah** task that performs the build and push steps \n*\tOnce the **build-push** task completes, the **deploy-cm** task is executed to deploy the app to OpenShift\n*\tThe pipeline orchestrates the order of the task execution using the runAfter tag in the pipeline definition. If the **build-push** task fails, the **deploy** task does not run. \n\n1.\tReview the **pipeline.yaml** file  \n\n    ```\n    cat pipeline.yaml\n    ```\n    \n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: Pipeline\n    metadata:\n    name: tutorial-pipeline\n    spec:\n    resources:\n        - name: tekton1-git\n        type: git\n        - name: tekton1-image\n        type: image\n    params:\n        - name: BUILDER_IMAGE\n        description: Image used to do the build\n        default: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        description: Location of the docker file\n        default: ./Dockerfile\n        - name: TLSVERIFY\n        description: True or False for TLS Verificatoin\n        default: \"false\"\n        - name: pathToContext\n        description: path to context\n        default: /workspace/tekton1-git\n        - name: targetNamespace\n        description: namespace\n        default: tekton-lab\n    tasks:\n        - name: build-push\n        taskRef:\n            name: buildah\n        params:\n            - name: BUILDER_IMAGE\n            value: \"$(params.BUILDER_IMAGE)\"\n            - name: DOCKERFILE\n            value: \"$(params.DOCKERFILE)\"\n            - name: TLSVERIFY\n            value: \"$(params.TLSVERIFY)\"\n        resources:\n            inputs:\n            - name: tekton1-git\n                resource: tekton1-git\n            outputs:\n            - name:  tekton1-image\n                resource: tekton1-image\n        - name: deploy-to-cluster\n        taskRef:\n            name: deploy-cm\n        params:\n            - name: pathToContext\n            value: \"$(params.pathToContext)\"\n            - name: targetNamespace\n            value: \"$(params.targetNamespace)\"\n        resources:\n            inputs:\n            - name: tekton1-git\n                resource: tekton1-git\n        runAfter:\n            - build-push\n\n    ```\n\n2.\tUse the **pipeline.yaml** file to create the pipeline, then list the new pipeline.\n\n    ```\n\toc create -f ./pipeline.yaml -n tekton-lab\n    oc get pipelines\n    ```\n\n    Sample output:\n    ```\n    pipeline.tekton.dev/tutorial-pipeline created\n    ....\n    NAME                AGE\n    tutorial-pipeline   1s\n    ```\n\n#### 6.10\tView the pipeline resources created in OCP web console\n\nUp to now, you have created PipelineResources, tasks and pipelines in the OCP cluster.  You can access the OCP web console and view and verify these pipeline resources.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n\n2. From the browser window, click OCP cluster web console bookmark to open it.\n\n  ![](images/ocp-console-bookmark.png) \n  \n3. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The OCP cluster We Console page is displayed. The default view is the Cluster Overview.\n  \n  ![](images/ocp-console-overview-page.png)\n\n4. Navigate to **Pipelines**>**Pipelines** under the **token-lab** project scope, you can see the pipeline you just created listed.\n\n    ![](images/tekton-pipeline-list.png)\n\n5. Click **Pipeline Resources** to view the two pipeline resources you created.\n\n    ![](images/tekton-pipeline-resources.png)\n\n6. Click **Pipelines**>**Tasks** to view the two pipeline tasks you created.\n\n    ![](images/tekton-pipeline-task-list.png)\n\n#### 6.11 Run the Pipeline\n\nTekton uses **PipelineRun** to instantiate a pipeline for execution with specific inputs, outputs, and execution parameters on a cluster. A corresponding TaskRun is created for each Task automatically in the PipelineRun.\n\nIn this lab you create a pipelinerun using the **pipeline-run.yaml** file.\n1. Review the **pipeline-run.yaml** file  \n\n    ```\n    cat pipeline-run.yaml\n    ```\n    \n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineRun\n    metadata:\n    name: tutorial-pipeline-run-1\n    spec:\n    pipelineRef:\n        name: tutorial-pipeline\n    resources:\n        - name: tekton1-git\n        resourceRef:\n            name: tekton1-git\n        - name: tekton1-image\n        resourceRef:\n            name: tekton1-image\n    params:\n        - name: BUILDER_IMAGE\n        value: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        value: ./Dockerfile\n        - name: TLSVERIFY\n        value: \"false\"\n        - name: pathToContext\n        value: /workspace/tekton1-git\n        - name: targetNamespace\n        value: tekton-lab\n    ```\n2. Create your pielinerun with command:\n\n    ```\n    oc apply -f ./pipeline-run.yaml -n tekton-lab\n    ```\n    \n    a pipelinerun resource is created in the OCP cluster.\n    \n3. Go back to the OCP web console, go to **Pipelines**>**Pipelines** under **tekton-lab** project scope and click the **Pipeline Runs** tab. You see the pipelinerun you created is in running status, click its like to view the details.\n\n    ![](images/tekton-pipelinerun-list.png)\n\n\n4.\tThe pipelinerun is started. Click on its name link to view the live status of the pipelinerun:\n\n    ![](images/tekton-pipelinerun-details.png)\n\n    In the pipelinerun page, you can see the pipeline is running, and the task status.\n    \n\n5.\tWait for the PipelineRun to complete. The Tekton pipeline takes several minutes to complete. You can view the task logs of the pipelinerun to see the details by clicking their links. \n\n    ![](images/tekton-task-log-link.png)\n\n    ![](images/tekton-task-logs.png)\n\n\n####\t6.11\tVerify the Deployment\nWhen the pipelinerun has completed successfully, view the running application.\n\n1.\tFrom the OpenShift web console expand the **Workloads** menu and select **Pods** under the **tekton-lab** project, you see the application is deployed and running.\n \n    ![](images/tekton-workloads-pods.png)\n\n2.\t You can click its link to view the application details.\n\n3.\tExpand the **Networking** menu and select **Services**.\n\n    ![](images/tekton-service.png)\n    \n    The application service is listed, click its link to view its details.\n\n5.\tExpand the Networking menu and select Routes, you can see that the new route is created, click your sample application URL to launch it.\n\n    ![](images/tekton-app-url.png)\n \n    Your sample application page is displayed.\n \n    ![](images/tekton-app-home-page.png)\n### 7.\tSummary\n\nYou have completed the lab and are on your way to developing robust pipelines for CI/CD of your application deployments using containers and OCP.  \n\nIn this lab, you learned how to create the Tekton resources to automate CI/CD for microservices deployed to OpenShift. \n\n*\tPipelineResource\n*\tTask\n*\tPipeline\n*\tPipelineRun\n\nYou learned how to configure a Service Account with proper authorization and roles to be able to push Docker images to an image registry and authenticate to OpenShift and deploy the application via the OpenShift Pipeline. To learn more about IBM App Mod, DevOPs and Dya 2 Operation solutions, please continue with the rest of the lab series.\nCongratulations! You have successfully completed the lab “Using Tekton Pipelines for CI/CD of Microservices to Red Hat OpenShift Container Platform”.\n\n","type":"Mdx","contentDigest":"58b509a32f59ba1f37e81a7b4818bec5","owner":"gatsby-plugin-mdx","counter":7014},"frontmatter":{"title":"Using Tekton Pipelines","description":null},"exports":{},"rawBody":"---\ntitle: Using Tekton Pipelines \ndescription: \n---\n\nTekton is a set of Kubernetes custom resource definitions (CRD) as standard constructs for creating Continuous Integration and Continuous Delivery (CI/CD) pipelines. \n\nThe following is a brief introduction to the Tekton CRDs. \n*\tTask: A sequence of commands (steps) that are run in separate containers in a pod\n*\tPipeline: A collection of tasks that are executed in a defined order\n*\tPipelineResource: Inputs (e.g. git repo) and outputs (e.g. image registry) to a pipeline\n*\tTaskRun: Runtime representation of an execution of a task\n*\tPipelineRun: Runtime representation of an execution of a pipeline\n\n![](images/tekton-crds.png)\n\nAs explained above, all objects within a Tekton pipeline are Kubernetes objects. \nPipelines have tasks, which are actually a CRD that runs a container. \nWithin the task you define steps, which are commands that you run inside the container. \nPipelines normally have resources associated with them, which can be accessed by all tasks within that pipeline. \nIt should be noted that tasks can be used within multiple pipelines, so it's good practice to use pipeline resources to define the resources used, such as GitHub repositories or docker hub image definitions.\n\n![](images/tekton-tasks.png)\n\nRed Hat OpenShift Pipelines is a cloud-native, continuous integration and continuous delivery (CI/CD) solution based on Kubernetes resources. It uses Tekton building blocks to automate deployments across multiple platforms by abstracting away the underlying implementation details. \n\t\nIn this lab exercise, you deploy a cloud native application to an OpenShift cluster using the Red Hat OpenShift Pipelines.\n\n### 1.\tBusiness Scenario\n\nThis lab covers the following business scenario:\n\nYour development team has created a cloud native NodeJS application and saved the application code in GitHub, now it is your responsibility to deploy the application to a Red Hat OpenShift Cluster Platform (OCP). You deploy a Tekton Pipeline along with Pipeline Resources, and two Task objects. The pipeline pulls the application source code from GitHub and build the Docker image. Once the image is built, the image is pushed to a local Image repository in a OCP cluster. Lastly, the pipeline runs the task that deploys this containerized application to the OpenShift (Kubernetes) runtime.\n\nHere is a diagram of what you are going to build in this lab.\n \n![](images/tekton-pipeline.png)\n\nThere are a few things you need to configure along with the pipeline, such as secrets and a service account. This lab guides you through all the steps, but you should take some time to learn more about the security roles that are associated with your service account which allow the service account user to push images to the OpenShift registry, and execute the pipeline resources.\n \n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tlearn how to create a pipeline task \n*\tlearn how to build a pipeline\n*\tlearn how to configure the OCP cluster to run the pipeline\n*\tlearn how to run the pipeline to deploy the application the OCP cluster\n\n### 3.\tPrerequisites\n\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave a SkyTap App Mod Lab environment ready\n\n### 4.\tWhat is Already Completed\n\nA six Linux VMs App Mod Lab environment has been provided for this lab. \n \n  ![](images/lab-vms.png)\n\n*\tThe Red Hat OpenShift Container Platform (OCP) v4.6, is installed in 5 VMs, the master1 VM, the master2 VM, the master3 VM, the dns VM and the nfs VM, with 3 master nodes and 3 compute nodes (the master nodes are serving as computer nodes as well).\n*\tThe Workstation VM is the one you will use to access and work with OCP cluster in this lab.\n  The login credentials for the Workstation VM are:\n  User ID: **ibmdemo**\n  Password: **passw0rd**\n  Note: Use the Password above in the Workstation VM Terminal for sudo in the Lab.\n*\tThe CLI commands used in this lab are listed in the **Commands.txt** file located at the **/home/ibmdemo/add-mod-labs/dv0100st** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\n\nDuring this lab, you complete the following tasks:\n*\tClone the Git repository used for this lab and explore the contents\n*\tLogin to OpenShift and create a new project for this lab\n*\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n*\tCreate Tekton Task\n*\tCreate the Deployment Task\n*\tCreate the Pipeline \n*\tRun the Pipeline\n\n### 6.\tExecute Lab Tasks\n\n#### 6.1 Log in to the Workstation VM and get started \n1.  If the VMs are not already started, start them by clicking the play button for the whole group.\n\n  ![](images/start-vms.png)\n\n2.\tAfter the VMs are started, click the Workstation VM icon to access it. \n\n  ![](images/access-workstation.png)\n\n  The Workstation Linux Desktop is displayed. You execute all the lab tasks on this workstation VM.\n\n3.\tIf requested to log in to the Workstation OS, use credentials: **ibmdemo**/**passw0rd**\n4. Open a terminal window by clicking its icon from the Desktop toolbar.\n\n  ![](images/terminal-icon.png)\n5. If this is your first time to run the lab series in this lab environment, do the following, otherwise if you have already downloaded the lab materials in other labs, you can skip this step.\n  \n  a. In the terminal window, run the following command to get the lab materials.\n\n  ```\n  /home/ibmdemo/get-lab-materials.sh\n  ```\n\n  Sample output\n\n  ```\n  Cloning into 'app-mod-labs'...\n  warning: redirecting to https://github.com/wtistang/app-mod-labs.git/\n  remote: Enumerating objects: 5693, done.\n  remote: Counting objects: 100% (185/185), done.\n  remote: Compressing objects: 100% (118/118), done.\n  remote: Total 5693 (delta 53), reused 184 (delta 53), pack-reused 5508\n  Receiving objects: 100% (5693/5693), 277.71 MiB | 57.39 MiB/s, done.\n  Resolving deltas: 100% (2250/2250), done.\n  Checking out files: 100% (6120/6120), done.\n  ```\n  \n  The lab materials is downloaded to the **/home/ibmdemo/app-mod-labs** directory.\n  \n6. Open **File Manager** by clicking its icon on the Desktop toolbar.\n\n  ![](images/file-manager-icon.png)\n\n7. Navigate to **/home/ibmdemo/app-mod-labs/dv0200st** directory and double-click to open **Commands.txt** file in the text editor.\n\n  ![](images/open-commands-txt-dv0200st.png)\n\n  This file contains all commands used in the lab.  When you need to any command in a terminal window in the future tasks, you should come back to this file and copy/paste the command from this file, this is because you cannot directly copy and paste from your local workstation to the SkyTap workstation.\n\n#### 6.2\tClone the Git repository used for this lab and explore the contents\n\n1.\tFrom the terminal window clone the **tekton-lab** GitHub repository to the lab Workstation.\n    \n    a. From the terminal window, run the following commands to clone the **tekton-lab** repo:\n    \n    ```\n    cd /home/ibmdemo/app-mod-labs/dv0200st\n\tgit clone https://github.com/wtistang/tekton-lab.git\n\tcd tekton-lab\n    ```\n    \n    These commands above clone the public repo named **tekton-lab** to the local directory under **/home/ibmdemo/app-mod-labs/dv0200st/tekton-lab** directory. \n\n    b.\tList the directory contents using the **ls -l** command\n        \n    ```\n    ls -l\n\t```\n    \n    Sample output:\n    ```\n    ```\n\n    You find the following key resources: \n    *\tDockerfile – Used to build the NodeJS Express Application\n    *\tapp.js – The NodeJS Application\n    *\ttekton-pipeline (folder) – YAML files to create the Pipeline resources for this lab\n \n    In the GitHub repo, you find all the YAML files in the **tekton-pipeline** sub folder. \n\n3.\tEnter commands below to go to the Tekton-pipeline directory and list the contents.\n    ```\n    cd tekton-pipeline\n    ls -l\n    ```\n    \n    Sample output:\n    ```\n    ```\n\n    In the **tekton-lab/tekton-pipeline** directory, you find all the YAML files needed to create the Tekton pipeline resources to build and deploy a simple NodeJS Express application to OpenShift.\n \n    You find the following key resources: \n    *\tgit-resource.yaml – Creates the Pipeline resource that references the input GitHub repo that contains the source for the application to be built and deployed via the pipeline\n    *\timage-resource.yaml – Creates the Pipeline resource that references the output Docker image registry where the Docker image is pushed via the pipeline \n    *\ttask.yaml – Creates the build and push Tekton tasks\n    *\tpipeline.yaml – Creates the pipeline that invokes the tasks defined \n    *\toc-deploy.yaml – Creates the Tekton deployment Task to deploy the application to OpenShift\n    *\tdeployment.yaml – Invoked by the oc-deployment task to create the OpenShift Deployment, Service and Route for the application \n    *\tpipeline-run.yaml – Runtime execution of the pipeline to build and deploy the app\n\n \n#### 6.3\tLogin to OpenShift and create a new project from commandline\n\n1. From the terminal window, issue the **oc login** command to login to the OCP cluster:\n\n  ```\n  oc login https://api.demo.ibmdte.net:6443\n  ```\n\n  when prompted, enter the login credentials as: **ibmadmin**/**engageibm**.\n  \n  ```\n  Authentication required for https://api.demo.ibmdte.net:6443 (openshift)\n  Username: ibmadmin\n  Password: \n  Login successful.\n\n  You have access to 66 projects, the list has been suppressed. You can list all projects with ' projects'\n\n  Using project \"default\".\n  ``` \n\n2. Create a new project (namespace) named **tekton-lab**.\n\n    ```\n    oc new-project tekton-lab\n    ```\n\n    You see the message to confirm that the **tekton-lab** project is created.\n\n    Sample output:\n    ```\n    Now using project \"tekton-lab\" on server \"https://api.demo.ibmdte.net:6443\".\n\n    You can add applications to this project with the 'new-app' command. For example, try:\n\n        oc new-app rails-postgresql-example\n\n    to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n        kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname\n\n\n    ```\n\n\n#### 6.4\tView OpenShift Service Account\n\nOpenShift Pipelines have been installed on the OCP cluster using the Red Hat OpenShift Pipelines Operator. Red Hat OpenShift Pipelines Operator adds and configures a ServiceAccount named **pipeline** that has sufficient permissions to build and push an image. This ServiceAccount is used by PipelineRun.\n\n1. Create a new service account names tekton-sa in the **tekton-lab** project with command:\n\n    ```\n    oc get serviceaccounts -n tekton-lab\n\t``` \n\n    Sample output:\n    ```\n    NAME        SECRETS   AGE\n    pipeline    2         5m\n    ```\n\n#### 6.5\tCreate Secret with Login Token for the Service Account\n\nNext, create a new Kubernetes secret with the login token for the Service Account. This is needed by the account for an automated login for the deploy task of the pipeline. \n\nA two steps process is used to create the secret:\n*\tThe first command extracts the token from the **pipeline-token** secret and store it in a file (**token.txt**). \n*\tThe second command creates a new secret using that token. The deploy task uses the token within this secret to login and issue the deploy command during the pipeline.\n\n1. Run the following commands to create the new secret for the service account to login to OpenShift while running the Pipeline. \n\n    a. Get the token from the service account and store it in a file.\n\t\n    ```\n    oc get secret $(oc get secret -n tekton-lab | grep pipeline-token | head -1 | awk '{print $1}') -n tekton-lab -o jsonpath=\"{.data.token}\" | base64 -d > token.txt\n    ```\n\n    b. Verify the token was written to the token.txt file\n\n    ```\n    cat token.txt\n    ```\n    Sample output:\n    ```\n    eyJhbGciOiJSUzI1NiIsImtpZCI6IkhIc04tMkhJRkJDaXFjRFp2Uk1WamtWa3VnVFNFTDNJdWxJUHVzWnU4bFUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0ZWt0b24tbGFiIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InBpcGVsaW5lLXRva2VuLTU0OGg2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBpcGVsaW5lIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiN2UyMjcyNjAtZDRhYy00NTRiLWE1ZWYtNzZkMTdlZDhlYjJhIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnRla3Rvbi1sYWI6cGlwZWxpbmUifQ.H8e_tRRnvaGYUF98XF8dMURu10VvOeD7A4Obj4gDs3TxujANCCC5-3aCHiuVEEWDy3RoAfwjusWu3WOfz0g3n5Bm82lLao0DQt-_22w24GtLVNJ5FCZrNg0TqFJ5_1i8em2Si06MpgxQeKy96aAYdRHpLoN2omE5Q1J9VmS6sV17AvF2KcywFfAGEmBaCOXF1LcLX-4Op3tstONejE370JJVdxL-lWm19E2qymS8mMuCTIBWF4-0X_ZSgV2O-iJmHeKUjAYizbPkq74M5EW1QAPsd0D_ApvzIE5JOr5wHtoVHaKIJoMuWrl3L3i-aNRrmDhaTBTWQe2b0GHsK51FaA\n    ```\n\n    c. Create a new secret **tekton-lab-deployer-secret** with the token extracted from the service account\n\t\n    ```\n    oc create secret generic tekton-lab-deployer-secret --from-literal=user=sa --from-file=token=token.txt -n tekton-lab\n    ```\n    \n    d. Verify the new secret with command:\n    \n    ```\n    oc describe secret tekton-lab-deployer-secret -n tekton-lab\n    ```\n    \n    Sample output:\n    ```\n    Name:         tekton-lab-deployer-secret\n    Namespace:    tekton-lab\n    Labels:       <none>\n    Annotations:  <none>\n\n    Type:  Opaque\n\n    Data\n    ====\n    user:   2 bytes\n    token:  912 bytes\n\n    ```\n\n\n#### 6.6 Create the Tekton PipelineResources for the Applications Build and Deployment\n\nNext, you define two PipelineResources to be used by the Tekton pipeline:\n*\tgit-resource.yaml creates a Tekton PipelineResource identifying the GitHub repository from which the pipeline pulls its data during a build.\n*\timg-resource.yaml creates a Tekton PipelineResource identifying the image location.  The tag for that image must be changed every time the application is updated, and the pipeline executed. \n\n1. Ensure the terminal window is in the **/home/ibmdemo/app-mod-labs/dv0200st/tekton-lab/tekton-pipeline** directory, where the pipeline YAML files are located. \n\n    ```\n    cd /home/ibmdemo/app-mod-labs/dv0200st/tekton-lab/tekton-pipeline\n    ```\n2. Review the contents of **git-resource.yaml** file. \n\n    ```\n    cat git-resource.yaml \n    ```\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n    name: tekton1-git\n    spec:\n    type: git\n    params:\n        - name: revision\n        value: master\n        - name: url\n        value: https://github.com/wtistang/tekton-lab.git\n\n    ```\n    As you can see:\n    * The name of the PipelineResource is **tekton1-git**\n    * The source type is **git**\n    * The url to the source git repo is defined in the “url” parameter. \n\n3. Review the contents of **img-resource.yaml** file.\n\n    ```\n\tcat img-resource.yaml \n    ```\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n    name: tekton1-image\n    spec:\n    type: image\n    params:\n        - name: url\n        value: image-registry.openshift-image-registry.svc:5000/tekton-lab/tekton1:latest\n    ```\n    As you can see:\n    * The name of the PipelineResource is **tekton1-image**\n    * The type is **image**\n    * The url parameter defines the location of the image registry where the built image is pushed during the execution of the pipeline. \n\n4. Run the following commands to create the PipelineResources using the YAML files\n\n    ```\n\toc create -f git-resource.yaml -n tekton-lab\n\toc create -f img-resource.yaml -n tekton-lab\n    ```\n    \n5. List the new PipelineResources \n\n    ```\t\n    oc get pipelineresources -n tekton-lab\n    ```\n\n    Sample output:\n    ```\n    NAME            AGE\n    tekton1-git     42s\n    tekton1-image   40s\n    ```\n\n#### 6.7\tCreate the Build Tekton Task\nYou have created the PipelineResources, which define the input and output for the build and created a Service account with the proper privileges and roles, and credentials to run the pipeline, push images to the image registry, and deploy pods to OpenShift. \n\nIn this task, you create a Tekton task to build the Docker image, and push the image to the OpenShift Image Registry\n\nThe Tekton task you are ready to create contains two steps: \n*\tbuild the Docker image from the source GitHub repo\n*\tpushes the image to the OpenShift image registry\n\nNote: There are different ways to build a Docker image inside a task, for this lab, you use buildah to build your application Docker image (https://buildah.io/).\nBuildah is a command-line tool for building Open Container Initiative-compatible (that means Docker- and Kubernetes-compatible, too) images quickly and easily. It is easy to incorporate into scripts and build pipelines.\n\n1. Review the **task.yaml** file using cat command. \n\n    ```\n    cat task.yaml\n    ```\n    \n    Sample output:\n    ```\n    ---\n    apiVersion: tekton.dev/v1alpha1\n    kind: Task\n    metadata:\n    name: buildah\n    spec:\n    inputs:\n        params:\n        - name: BUILDER_IMAGE\n        description: The location of the buildah builder image.\n        default: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        description: Path to the Dockerfile to build.\n        default: ./Dockerfile\n        - name: TLSVERIFY\n        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)\n        default: \"false\"\n        resources:\n        - name: tekton1-git\n        type: git\n    outputs:\n        resources:\n        - name: tekton1-image\n        type: image\n    steps:\n    - name: build\n        image: quay.io/buildah/stable:v1.11.0\n        workingDir: /workspace/tekton1-git\n        command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--format=docker', '-f', '$(inputs.params.DOCKERFILE)', '-t', '$(outputs.resources.tekton1-image.url)', '.']\n        volumeMounts:\n        - name: varlibcontainers\n        mountPath: /var/lib/containers\n        securityContext:\n        privileged: true\n    - name: push\n        image: quay.io/buildah/stable:v1.11.0\n        workingDir: /workspace/tekton1-git\n        command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.tekton1-image.url)', 'docker://$(outputs.resources.tekton1-image.url)']\n        volumeMounts:\n        - name: varlibcontainers\n        mountPath: /var/lib/containers\n        securityContext:\n        privileged: true\n    volumes:\n    - name: varlibcontainers\n        emptyDir: {}\n\n    ```\n    The Task resource defines its spec as illustrated below:\n    *\tThe input resource\n    *\tThe output resource\n    *\tLocal parameters used during the execution of the task\n    *\tSteps. In this lab, **build** and **push** are described. In general, steps are used to isolate individual commands.\n    *\tThe image used for the task execution. It is quay.io/buildah/stable.\n    *\tIts environment. The env variables are defined, based on configmap and/or secret. Here, a secret is used to define the authentication information.\n    *\tThe commands to execute in the **build** and **push** steps. The first one builds the image, the second pushes it to the target repository. \n\n\n2. You create the Task using the **task.yaml** file, then list the new **buildah** task. \n\n    ```\n    oc create -f ./task.yaml -n tekton-lab\n\toc get tasks\n    ```\n    \n    Sample output:\n    ```\n    task.tekton.dev/buildah created\n    ....\n    NAME      AGE\n    buildah   2s\n\n    ```\n\n#### 6.8\tCreate the Deployment Task\nTo manage the deployment of this simple NodeJs Express application, tasks are needed to specify a Deployment (controller for pods) and a Service definition in OpenShift. \n\nThe **oc-deployment.yaml** file defines a Tekton Task that in turn invokes a command to run the **deployment.yaml** to create the deployment, service and route for the sample application. To enable this action, the task defines with a step using the quay.io/openshift/origin-cli:latest docker image.\n\n1. Review the **oc-deploy.yaml**  file using cat command. \n\n    ```\n    cat oc-deploy.yaml\n    ```\n\n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: Task\n    metadata:\n    name: deploy-cm\n    spec:\n    inputs:\n        resources:\n        - name: tekton1-git\n            type: git\n        params:\n        - name: pathToContext\n            type: string\n            default: /workspace/tekton1-git\n        - name: targetNamespace\n            type: string\n            default: tekton-lab\n    steps:\n        - name: oc-service\n        image: quay.io/openshift/origin-cli:latest\n        env:\n            - name: REG_PWD\n            valueFrom:\n                secretKeyRef:\n                name: tekton-lab-deployer-secret\n                key: token\n        command: [\"/bin/bash\", \"-c\"]\n        args:\n            - oc apply -f /workspace/tekton1-git/tekton-pipeline/deployment.yaml --token=$REG_PWD -n $(inputs.params.targetNamespace)\n\n    ```\n\n2. Review the **deployment.yaml** file that is used to create the **Deployment** and **Service** for the application, and is invoked by the **deploy-cm** task you reviewed in the previous step  \n\n    ```\n    cat deployment.yaml\n\t```\n    Sample output:\n    ```\n    ---\n    # This the deployment YAML\n\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    labels:\n        app: tekton1\n    name: tekton1\n    spec:\n    replicas: 1\n    selector:\n        matchLabels:\n        app: tekton1\n    strategy: {}\n    template:\n        metadata:\n        creationTimestamp: null\n        labels:\n            app: tekton1\n        spec:\n        containers:\n        - image: image-registry.openshift-image-registry.svc:5000/tekton-lab/tekton1:latest\n            name: tekton1\n            resources: {}\n    status: {}\n    ---\n    # This the service yaml\n\n    apiVersion: v1\n    kind: Service\n    metadata:\n    labels:\n        app: tekton1\n    name: tekton1-svc\n    spec:\n    ports:\n        - port: 3000\n        protocol: TCP\n        targetPort: 3000\n    selector:\n        app: tekton1\n    type: LoadBalancer\n    ---\n    # This the route yaml\n\n    apiVersion: v1\n    kind: Route\n    apiVersion: route.openshift.io/v1\n    metadata:\n    name: tekton1-rou\n    labels:\n        app: tekton1\n    spec:\n    host: tekton1.apps.demo.ibmdte.net\n    to:\n        kind: Service\n        name: tekton1-svc\n        weight: 100\n    port:\n        targetPort: 3000\n    wildcardPolicy: None\n\n    ```\n    \n    In this YAML file:\n    * The **Deployment** specifies **1** replica (pod), and is deployed using the Docker image that is pushed to the OpenShift image registry. \n    * The **Service** defines how the application is accessed internally.\n    * The **Route** defines how the application is be accessed publicly.\n\n\n3. Run the oc-deploy.yaml to create the Tekton **Deployment** task. Then list the new task\n    ```\n    oc create -f ./oc-deploy.yaml -n tekton-lab\n\toc get tasks\n    ```\n\n   Sample output:\n    ```\n    task.tekton.dev/deploy-cm created\n    ....\n    NAME        AGE\n    buildah     5m47s\n    deploy-cm   3s\n    ```\n#### 6.9\tCreate the Pipeline \n\nNow that that tasks have been created, they can be incorporated and orchestrated in a Pipeline. In this task, you create the Tekton pipeline which invokes the **build/push** and **deploy** tasks you created.\n\nThe pipeline does the following: \n*\tFirst, the pipeline runs the **buildah** task that performs the build and push steps \n*\tOnce the **build-push** task completes, the **deploy-cm** task is executed to deploy the app to OpenShift\n*\tThe pipeline orchestrates the order of the task execution using the runAfter tag in the pipeline definition. If the **build-push** task fails, the **deploy** task does not run. \n\n1.\tReview the **pipeline.yaml** file  \n\n    ```\n    cat pipeline.yaml\n    ```\n    \n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: Pipeline\n    metadata:\n    name: tutorial-pipeline\n    spec:\n    resources:\n        - name: tekton1-git\n        type: git\n        - name: tekton1-image\n        type: image\n    params:\n        - name: BUILDER_IMAGE\n        description: Image used to do the build\n        default: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        description: Location of the docker file\n        default: ./Dockerfile\n        - name: TLSVERIFY\n        description: True or False for TLS Verificatoin\n        default: \"false\"\n        - name: pathToContext\n        description: path to context\n        default: /workspace/tekton1-git\n        - name: targetNamespace\n        description: namespace\n        default: tekton-lab\n    tasks:\n        - name: build-push\n        taskRef:\n            name: buildah\n        params:\n            - name: BUILDER_IMAGE\n            value: \"$(params.BUILDER_IMAGE)\"\n            - name: DOCKERFILE\n            value: \"$(params.DOCKERFILE)\"\n            - name: TLSVERIFY\n            value: \"$(params.TLSVERIFY)\"\n        resources:\n            inputs:\n            - name: tekton1-git\n                resource: tekton1-git\n            outputs:\n            - name:  tekton1-image\n                resource: tekton1-image\n        - name: deploy-to-cluster\n        taskRef:\n            name: deploy-cm\n        params:\n            - name: pathToContext\n            value: \"$(params.pathToContext)\"\n            - name: targetNamespace\n            value: \"$(params.targetNamespace)\"\n        resources:\n            inputs:\n            - name: tekton1-git\n                resource: tekton1-git\n        runAfter:\n            - build-push\n\n    ```\n\n2.\tUse the **pipeline.yaml** file to create the pipeline, then list the new pipeline.\n\n    ```\n\toc create -f ./pipeline.yaml -n tekton-lab\n    oc get pipelines\n    ```\n\n    Sample output:\n    ```\n    pipeline.tekton.dev/tutorial-pipeline created\n    ....\n    NAME                AGE\n    tutorial-pipeline   1s\n    ```\n\n#### 6.10\tView the pipeline resources created in OCP web console\n\nUp to now, you have created PipelineResources, tasks and pipelines in the OCP cluster.  You can access the OCP web console and view and verify these pipeline resources.\n\n1. Open a Firefox web browser window by clicking its icon on the Desktop toolbar.\n\n  ![](images/firefox-icon.png) \n\n2. From the browser window, click OCP cluster web console bookmark to open it.\n\n  ![](images/ocp-console-bookmark.png) \n  \n3. If prompted to log in to Red Hat OpenShift Container Platform, click **htpasswd** field. Then log in with **ibmadmin**/**engageibm** as the username and password.\n \n  ![](images/ocp-console-login-1.png) \n\n  ![](images/ocp-console-login-2.png) \n\n  The OCP cluster We Console page is displayed. The default view is the Cluster Overview.\n  \n  ![](images/ocp-console-overview-page.png)\n\n4. Navigate to **Pipelines**>**Pipelines** under the **token-lab** project scope, you can see the pipeline you just created listed.\n\n    ![](images/tekton-pipeline-list.png)\n\n5. Click **Pipeline Resources** to view the two pipeline resources you created.\n\n    ![](images/tekton-pipeline-resources.png)\n\n6. Click **Pipelines**>**Tasks** to view the two pipeline tasks you created.\n\n    ![](images/tekton-pipeline-task-list.png)\n\n#### 6.11 Run the Pipeline\n\nTekton uses **PipelineRun** to instantiate a pipeline for execution with specific inputs, outputs, and execution parameters on a cluster. A corresponding TaskRun is created for each Task automatically in the PipelineRun.\n\nIn this lab you create a pipelinerun using the **pipeline-run.yaml** file.\n1. Review the **pipeline-run.yaml** file  \n\n    ```\n    cat pipeline-run.yaml\n    ```\n    \n    Sample output:\n    ```\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineRun\n    metadata:\n    name: tutorial-pipeline-run-1\n    spec:\n    pipelineRef:\n        name: tutorial-pipeline\n    resources:\n        - name: tekton1-git\n        resourceRef:\n            name: tekton1-git\n        - name: tekton1-image\n        resourceRef:\n            name: tekton1-image\n    params:\n        - name: BUILDER_IMAGE\n        value: quay.io/buildah/stable:v1.11.0\n        - name: DOCKERFILE\n        value: ./Dockerfile\n        - name: TLSVERIFY\n        value: \"false\"\n        - name: pathToContext\n        value: /workspace/tekton1-git\n        - name: targetNamespace\n        value: tekton-lab\n    ```\n2. Create your pielinerun with command:\n\n    ```\n    oc apply -f ./pipeline-run.yaml -n tekton-lab\n    ```\n    \n    a pipelinerun resource is created in the OCP cluster.\n    \n3. Go back to the OCP web console, go to **Pipelines**>**Pipelines** under **tekton-lab** project scope and click the **Pipeline Runs** tab. You see the pipelinerun you created is in running status, click its like to view the details.\n\n    ![](images/tekton-pipelinerun-list.png)\n\n\n4.\tThe pipelinerun is started. Click on its name link to view the live status of the pipelinerun:\n\n    ![](images/tekton-pipelinerun-details.png)\n\n    In the pipelinerun page, you can see the pipeline is running, and the task status.\n    \n\n5.\tWait for the PipelineRun to complete. The Tekton pipeline takes several minutes to complete. You can view the task logs of the pipelinerun to see the details by clicking their links. \n\n    ![](images/tekton-task-log-link.png)\n\n    ![](images/tekton-task-logs.png)\n\n\n####\t6.11\tVerify the Deployment\nWhen the pipelinerun has completed successfully, view the running application.\n\n1.\tFrom the OpenShift web console expand the **Workloads** menu and select **Pods** under the **tekton-lab** project, you see the application is deployed and running.\n \n    ![](images/tekton-workloads-pods.png)\n\n2.\t You can click its link to view the application details.\n\n3.\tExpand the **Networking** menu and select **Services**.\n\n    ![](images/tekton-service.png)\n    \n    The application service is listed, click its link to view its details.\n\n5.\tExpand the Networking menu and select Routes, you can see that the new route is created, click your sample application URL to launch it.\n\n    ![](images/tekton-app-url.png)\n \n    Your sample application page is displayed.\n \n    ![](images/tekton-app-home-page.png)\n### 7.\tSummary\n\nYou have completed the lab and are on your way to developing robust pipelines for CI/CD of your application deployments using containers and OCP.  \n\nIn this lab, you learned how to create the Tekton resources to automate CI/CD for microservices deployed to OpenShift. \n\n*\tPipelineResource\n*\tTask\n*\tPipeline\n*\tPipelineRun\n\nYou learned how to configure a Service Account with proper authorization and roles to be able to push Docker images to an image registry and authenticate to OpenShift and deploy the application via the OpenShift Pipeline. To learn more about IBM App Mod, DevOPs and Dya 2 Operation solutions, please continue with the rest of the lab series.\nCongratulations! You have successfully completed the lab “Using Tekton Pipelines for CI/CD of Microservices to Red Hat OpenShift Container Platform”.\n\n","fileAbsolutePath":"/Users/yitang/Downloads/app-mod/src/pages/labs/devops-labs/dv0200-tekton/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}