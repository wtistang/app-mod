{"componentChunkName":"component---src-pages-labs-devops-labs-dv-0100-tekton-index-mdx","path":"/labs/devops-labs/dv0100-tekton/","result":{"pageContext":{"frontmatter":{"title":"Using Tekton Pipelines","description":null},"relativePagePath":"/labs/devops-labs/dv0100-tekton/index.mdx","titleType":"page","MdxNode":{"id":"224acf45-140c-5fa8-8dd6-b8ee358d1ed8","children":[],"parent":"e1aa2958-2fff-5832-a7e8-e8da05c1546a","internal":{"content":"---\ntitle: Using Tekton Pipelines \ndescription: \n---\n\nOne of the features included in the Cloud Pak for Applications is Tekton, a set of Kubernetes custom resource definitions (CRD) as standard constructs for creating Continuous Integration and Continuous Delivery (CI/CD) pipelines. \n\nThe following is a brief introduction to the Tekton CRDs. \n*\tTask: A sequence of commands (steps) that are run in separate containers in a pod\n*\tPipeline: A collection of tasks that are executed in a defined order\n*\tPipelineResource: Inputs (e.g. git repo) and outputs (e.g. image registry) to a pipeline\n*\tTaskRun: Runtime representation of an execution of a task\n*\tPipelineRun: Runtime representation of an execution of a pipeline\n\n![](images/tekton-crds.png)\n\nAs explained above, all objects within a Tekton pipeline are Kubernetes objects. \nPipelines have tasks, which are actually a CRD that runs a container. \nWithin the task you define steps, which are commands that you run inside the container. \nPipelines normally have resources associated with them, which can be accessed by all tasks within that pipeline. \nIt should be noted that tasks can be used within multiple pipelines, so it's good practice to use pipeline resources to define the resources used, such as GitHub repositories or docker hub image definitions.\n\n![](images/tekton-tasks.png)\n\nFor more information about Tekton and IBM Cloud Pak for Applications, please visit Cloud Pak for Applications.\n\t\nIn this lab exercise, you deploy a cloud native application to an OpenShift cluster using the Tekton pipeline.\n\n### 1.\tBusiness Scenario\n\nThis lab covers the following business scenario:\n\nYour development team has created a cloud native NodeJS application and saved the application code in GitHub, now it is your responsibility to deploy the application to a Red Hat OpenShift Cluster Platform (OCP). You deploy a Tekton Pipeline along with Pipeline Resources, and two Task objects. The pipeline pulls the application source code from GitHub and build the Docker image. Once the image is built, the image is pushed to a local Image repository in a OCP cluster. Lastly, the pipeline runs the task that deploys this containerized application to the OpenShift (Kubernetes) runtime.\n\nHere is a diagram of what you are going to build in this lab.\n \n![](images/tekton-pipeline.png)\n\nThere are a few things you need to configure along with the pipeline, such as secrets and a service account. This lab guides you through all the steps, but you should take some time to learn more about the security roles that are associated with your service account which allow the service account user to push images to the OpenShift registry, and execute the pipeline resources.\n \n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tlearn how to create a pipeline task \n*\tlearn how to build a pipeline\n*\tlearn how to configure the OCP cluster to run the pipeline\n*\tlearn how to run the pipeline to deploy the application the OCP cluster\n\n### 3.\tPrerequisites\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave completed Lab SU0100 of this lab series and have the CP4Apps installed in IBM Red Hat OpenShift Kubernetes Service (OCP) cluster on IBM Cloud.\n\n### 4.\tWhat is Already Completed\n\nThe Workstation VM is pre-configured for you to access and work with the OCP cluster in this lab.\n\nThe login credentials for the Workstation VM are provided in your Reservation Details page (**https://www.ibm.com/demos/my-reservations/**).\n\nThe CLI commands used in this lab are listed in the Commands.txt file located at the **/home/ibmdemo/app-mod-labs/dv0100** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\nDuring this lab, you complete the following tasks:\n*\tClone the Git repository used for this lab and explore the contents\n*\tLogin to OpenShift and create a new project for this lab\n*\tCreate an OpenShift Service Account and its Security Contexts / Roles\n*\tCreate Secret with Login Token for the Service Account\n*\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n*\tCreate Tekton Task\n*\tCreate the Deployment Task\n*\tCreate the Pipeline \n*\tRun the Pipeline\n\n\n### 6.\tExecute Lab Tasks\n#### 6.1 Log in to the Workstation VM and get started \n1.  Launch the VM from your local workstation web browser with the VM URL.\n \n    ![](images/vm-url.png)\n\n2.\tClick **Connect** to access the VM.\n \n    ![](images/vm-connect.png)\n\n3.\tEnter the password you obtained from the Reservation Details page and click **Send Password**.\n\n    ![](images/vm-password.png)\n\n    The VM desktop is displayed.\n\n    ![](images/vm-desktop.png)\n\n    The Workstation Desktop is displayed. You execute all the lab tasks on this VM.\n \n#### 6.2\tClone the Git repository used for this lab and explore the contents\n\n1.\tOpen a terminal window by clicking **Applications**>**Terminal**.\n    \n    ![](images/vm-terminal-link.png)\n\n2.\tClone the tekton-lab GitHub repository to the local VM.\n    \n    a. From the terminal window, run the following commands to clone the repo:\n    \n    ```\n    cd /home/ibmdemo\n\tgit clone https://github.com/wtistang/tekton-lab.git\n\tcd tekton-lab\n    ```\n\t\n    ![](images/clone-git-repo.png)\n    \n    These commands above clone the public repo named tekton-lab to the local directory under /home/ibmdemo/tekton-lab directory. \n\n    b.\tList the directory contents using the “ls -l” command\n        \n    ```\n    ls -l\n\t```\n    \n    ![](images/tekton-lab-ls-l.png)\n\n    You find the following key resources: \n    *\tDockerfile – Used to build the NodeJS Express Application\n    *\tapp.js – The NodeJS Application\n    *\ttekton-pipeline (folder) – YAML files to create the Pipeline resources for this lab\n \n    In the GitHub repo, you find all the YAML files in the tekton-pipeline sub folder. \n\n3.\tEnter commands below to go to the Tekton-pipeline directory and list the contents.\n    ```\n    cd tekton-pipeline\n    ls -l\n    ```\n    \n    ![](images/tekton-pipeline-ls-l.png)\n\n    In the tekton-lab/tekton-pipeline directory, you find all the YAML files needed to create the Tekton pipeline resources to build and deploy a simple NodeJS Express application to OpenShift.\n \n    You find the following key resources: \n    *\tgit-resource.yaml – Creates the Pipeline resource that references the input GitHub repo that contains the source for the application to be built and deployed via the pipeline\n    *\timage-resource.yaml – Creates the Pipeline resource that references the output Docker image registry where the Docker image is pushed via the pipeline \n    *\ttask.yaml – Creates the build and push Tekton tasks\n    *\tpipeline.yaml – Creates the pipeline that invokes the tasks defined \n    *\toc-deploy.yaml – Creates the Tekton deployment Task to deploy the application to OpenShift\n    *\tdeployment.yaml – Invoked by the oc-deployment task to create the OpenShift Deployment, Service and Route for the application \n    *\tpipeline-run.yaml – Runtime execution of the pipeline to build and deploy the app\n\n \n#### 6.4\tLogin to OpenShift and create a new project for this lab\n\n1. From the browser window, click OCP cluster Web Console bookmark to open it with your IBM credentials.\n\n  ![](images/ocp-console-bookmarked.png) \n2.\tIn the OpenShift Web Console page, click the **Action** icon next to your username and select **Copy Login** Command to get the OCP login command.\n\n  ![](images/ocp-copy-login-command.png) \n3.\tIn the next page, click **Display Token** link.\n\n  ![](images/display-token.png) \n4.\tCopy the OCP login command to the clipboard.\n\n  ![](images/copy-token.png) \n5.\tGo back to the Terminal window, right-click to paste the OCP login command window press Enter to log in to the OCP cluster.\n \n  ![](images/run-oc-login-command.png) \n\n6. Create a new project (namespace) as tekton-lab.\n\n    ```\n    oc new-project tekton-lab\n    ```\n\n    You see the message to confirm that the tekton-lab project is created.\n\n    ![](images/tekton-new-project.png)\n\n#### 6.4\tCreate an OpenShift Service Account and its Security Contexts / Roles\n\nIt is a good OpenShift practice to create a service account for your applications. A service account provides an identity for processes that run in a Pod.\n\nIn this step you create a new service account with the name “tekton-sa”. \n\n1. Create a new service account names tekton-sa in the tekton-lab project with command:\n\n    ```\n    oc create serviceaccount tekton-sa -n tekton-lab\n\t``` \n\n    ![](images/tekton-create-sa.png)\n\n2. Add Privileged access to the Service Account required to run pipelines and deploy applications to the OCP cluster.\n\n    ```\n    oc adm policy add-scc-to-user privileged -n tekton-lab -z tekton-sa  \n    ```\n\n    ![](images/tekton-add-policy.png)\n\n    The tekton-sa Service Account needs privileged access because the pipeline creates pods when it is running and it needs this authority to create the pods.\n\n    NOTE: The “-n” and “-z” params on this command are in reference to the namespace and service account name.\n3. Add edit role to the Service Account to allow for deployments to the OCP cluster.\n\n    ```\n    oc adm policy add-role-to-user edit -n tekton-lab -z tekton-sa\n    ```\n\n    ![](images/tekton-add-edit-role.png)\n\n    The tekton-sa Service Account requires the EDIT role so that it has the proper authority to make the deployment. This happens within the deployment task during the pipeline execution. \n4. Add system:image-builder Role to allow the Service Account to push images to the mage registry.\n\n    The pipeline build pods require the system:image-builder role, which allows pushing images to any image stream in the project using the internal Docker registry.\n\n    ```\n    oc adm policy add-role-to-user system:image-builder -n tekton-lab -z tekton-sa\n    ```\n    ![](images/tekton-add-image-builder-role.png)\n\n#### 6.5\tCreate Secret with Login Token for the Service Account\n\nNext, create a new Kubernetes secret with the login token for the tekton-sa Service Account. This is needed by the account for an automated login for the deploy task of the pipeline. \n\nA two steps process is used to create the secret:\n*\tThe first command extracts the token from the “tekton-sa-token” secret and store it in a file (token.txt). \n*\tThe second command creates a new secret using that token. The deploy task uses the token within this secret to login and issue the deploy command during the pipeline.\n\n1. Run the following commands to create the new secret for the service account to login to OpenShift while running the Pipeline. \n\n    a. Get the token from the service account and store it in a file.\n\t\n    ```\n    oc get secret $(oc get secret -n tekton-lab | grep tekton-sa-token | head -1 | awk '{print $1}') -n tekton-lab -o jsonpath=\"{.data.token}\" | base64 -d > token.txt\n    ```\n    ![](images/tekton-get-token.png)\n\n    b. Verify the token was written to the token.txt file\n\n    ```\n    cat token.txt\n    ```\n    ![](images/tekton-show-token.png)\n\n    c. Create a new secret with the token extracted from the service account\n\t\n    ```\n    oc create secret generic tekton-lab-deployer-secret --from-literal=user=sa --from-file=token=token.txt -n tekton-lab\n    ```\n    \n    ![](images/tekton-create-secret.png)\n\n    d. Verify the new secret with command:\n    \n    ```\n    oc describe secret tekton-lab-deployer-secret\n    ```\n    \n    ![](images/tekton-show-secret.png)\n\n#### 6.6\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n\nNext, you define two PipelineResources to be used by the Tekton pipeline:\n*\tgit-resource.yaml creates a Tekton PipelineResource identifying the GitHub repository from which the pipeline pulls its data during a build.\n*\timg-resource.yaml creates a Tekton PipelineResource identifying the image location.  The tag for that image must be changed every time the application is updated, and the pipeline executed. \n\n1. Ensure the Terminal window is in the /home/ibmdemo/tekton-lab/tekton-pipeline directory, where the Pipeline YAML files are located. \n\n    ```\n    cd /home/ibmdemo/tekton-lab/tekton-pipeline\n    ```\n2. Review the contents of git-resource.yaml. \n\n    ```\n    cat git-resource.yaml \n    ```\n\n    As you can see:\n    * The name of the PipelineResource is tekton1-git\n    * The source type is git\n    * The url to the source git repo is defined in the “url” parameter. \n\n     ![](images/tekton-git-resource.png)\n\n3. Review the contents of img-resource.yaml.\n\n    ```\n\tcat img-resource.yaml \n    ```\n    As you can see:\n    * The name of the PipelineResource is tekton1-image\n    * The type is “image”\n    * The url parameter defines the location of the image registry where the built image is pushed during the execution of the pipeline. \n\n     ![](images/tekton-image-resource.png)\n4. Run the following commands to create the PipelineResources using the YAML files\n\n    ```\n\toc create -f git-resource.yaml\n\toc create -f img-resource.yaml\n    ```\n    ![](images/tekton-create-resources.png)\n\n5. List the new PipelineResources \n\n    ```\t\n    oc get pipelineresources \n    ```\n\n    ![](images/tekton-pipelineresources.png)\n\n#### 6.7\tCreate Tekton Task\nYou have created the PipelineResources, which define the input and output for the build and created a Service account with the proper privileges and roles, and credentials to run the pipeline, push images to the image registry, and deploy pods to OpenShift. \n\nIn this task, you create a Tekton task to build the Docker image, and push the image to the OpenShift Image Registry\n\nThe Tekton task you are ready to create contains two steps: \n*\tbuild the Docker image from the source GitHub repo\n*\tpushes the image to the OpenShift image registry\n\nNote: There are different ways to build a Docker image inside a task, for this lab, you use buildah to build your application Docker image (https://buildah.io/).\nBuildah is a command-line tool for building Open Container Initiative-compatible (that means Docker- and Kubernetes-compatible, too) images quickly and easily. It is easy to incorporate into scripts and build pipelines.\n\n1. Review the task.yaml file using cat command. \n\n    ```\n    cat task.yaml\n    ```\n    \n    The Task resource defines its spec as illustrated below:\n    *\tThe input resource\n    *\tThe output resource\n    *\tLocal parameters used during the execution of the task\n    *\tSteps. In this lab, “build” and “push” are described. In general, steps are used to isolate individual commands.\n    *\tThe image used for the task execution. It is quay.io/buildah/stable.\n    *\tIts environment. The env variables are defined, based on configmap and/or secret. Here, a secret is used to define the authentication information.\n    *\tThe commands to execute in the “build” and “push” steps. The first one builds the image, the second pushes it to the target repository. \n\n    ![](images/tekton-cat-tasks.png) \n\n2. You create the Task using the task.yaml file, then list the new “buildah” task. \n\n    ```\n    oc create -f ./task.yaml\n\toc get tasks\n    ```\n    \n    ![](images/tekton-create-tasks.png)\n\n#### 6.8\tCreate the Deployment Task\nTo manage the deployment of this simple NodeJs Express application, tasks are needed to specify a Deployment (controller for pods) and a Service definition in OpenShift. \n\nThe oc-deployment.yaml file defines a Tekton Task that in turn invokes a command to run the deployment.yaml to create the deployment, service and route for the sample application. To enable this action, each task defines with a step using the quay.io/openshift/origin-cli:latest docker image.\n1. Review the oc-deploy.yaml  file using cat command. \n\n    ```\n    cat oc-deploy.yaml\n    ```\n\n    ![](images/tekton-oc-deploy.png)\n\n2. Review the deployment.yaml file that is used to create the Deployment and Service for the application, and is invoked by deploy-cm Task you reviewed in the previous step  \n\n    ```\n    cat deployment.yaml\n\t```\n    \n    In this YAML file:\n    * The Deployment specifies 1 replica (pod), and is deployed using the Docker image that is pushed to the OpenShift image registry. \n    * The Service defines how the application is accessed internally.\n    * The Route defines how the application is be accessed publicly.\n\n    ![](images/tekton-deployment.png)\n\n3. Run the oc-deploy.yaml to create the Tekton Deployment Task. Then list the new task\n    ```\n    oc create -f ./oc-deploy.yaml\n\toc get tasks\n    ```\n\n    ![](images/tekton-create-oc-deploy.png)\n#### 6.9\tCreate the Pipeline \n\nNow that that tasks have been created, they can be incorporated and orchestrated in a Pipeline. In this task, you create the Tekton pipeline which invokes the build/push and deploy Tasks you created.\n\nThe pipeline does the following: \n*\tFirst, the pipeline runs the buildah task that performs the build and push steps \n*\tOnce the build-push task completes, the deploy-cm task is executed to deploy the app to OpenShift\n*\tThe pipeline orchestrates the order of the task execution using the runAfter tag in the pipeline definition. If the build-push task fails, the deploy task does not run. \n\n1.\tReview the pipeline.yaml file  \n\n    ```\n    cat pipeline.yaml\n    ```\n    \n    ![](images/tekton-cat-pipeline.png)\n\n    Snippet showing the tasks in the pipeline.yml file\n \n2.\tUse the pipeline.yaml file to Create the pipeline. Then list the new pipeline \n\n    ```\n\toc create -f ./pipeline.yaml\n    oc get pipelines\n    ```\n\n    ![](images/tekton-create-pipeline.png)\n\n#### 6.10\tRun the Pipeline\n\nTo execute the pipeline, a PipelineRun artefact should be created. You can do it in CLI or in Tekton Dashboard. In this lab, you do it from in the Tekton. The Tekton Dashboard is a general purpose, web-based UI for Tekton Pipelines and Tekton triggers resources. It allows users to manage and view Tekton resource creation, execution, and completion.\n\n1. Access the Tekton Dashboard\n    a. From the Workstation desktop, open a Firefox window by clicking its icon on the Desktop Tool Bar.\n\n    ![](images/vm-browser-link.png)\n\n    b. \tClick on the Tekton Dashboard bookmark of the Firefox browser window.\n\n    ![](images/tekton-bookmark.png)\n\n    The Tekton Dashboard page is displayed.\n\n2. From the Tekton Dashboard, use the Namespace pulldown menu, and select the **tekton-lab** namespace to filter the resources to the namespace used in the lab.\n\n    ![](images/tekton-lab-namespace.png)\n\n3. Click the **PipelineResources** menu option, you can see the two PipelineResources you created in previous step. These resources are needed to run the pipeline. \n\n    ![](images/tekton-pipelineresources.png)\n  \n4. Click the PipelineRuns menu option, and click **Create** to create a new PipelineRun.\n \n    ![](images/tekton-pipelineruns.png)\n     \n    A PipelineRun starts a Pipeline and ties it to the Git and image resources that should be used for the specific invocation. It automatically creates and starts the TaskRuns for each Task in the Pipeline.\n\n5.\tFill in the fields for the PipelineRun as illustrated below:\n\n    *\tNamespace: tekton-lab\n\n    *\tPipeline: tutorial-pipeline \n\n    *\tGit-source: tekton1-git\n\n    *\tDocker-image: tekton1-image\n\n    *\tServiceAccount: tekton-sa\n\n    ![](images/tekton-pipelinerun-values.png)\n\n    ![](images/tekton-pipelinerun-values-2.png)\n\n    ![](images/tekton-pipelinerun-values-3.png)\n\n6.\tClick Create to run the Pipeline\n\n    ![](images/tekton-pipelinerun-create.png)\n\n7.\tThe pipelinerun is started. Click on its name to view the live status of the pipelinerun:\n\n    ![](images/tekton-pipelinerun-list.png)\n\n    In the pipelinerun page, you can see the pipeline is running\n    \n    ![](images/tekton-pipeline-running.png)\n\n8.\tWait for the PipelineRun to complete. The Tekton pipeline takes several minutes to complete. As the Pipeline run, you can view its logs to see the details. \n\n    ![](images/tekton-pipelinerun-logs.png)\n\n\n####\t6.11\tVerify the Deployment\nWhen the pipelinerun has completed successfully, view the running application.\n\n1.\tClick on the OpenShift web console bookmark\n\n    ![](images/tekton-ocp-bookmark.png)\n\n 2.\tExpand the **Workloads** menu and select **Pods**.\n \n    ![](images/tekton-workloads-pods.png)\n\n3.\tChange Project to **tekton-lab** project.\n\n    ![](images/tekton-project-tekton-lab.png)\n \n    You can see your application is in Running status. You can click its link to view the details.\n\n    ![](images/tekton-pod.png)\n\n4.\tExpand the Networking menu and select Services.\n\n    ![](images/tekton-service.png)\n    \n    The application service is listed, click its link to view its details.\n\n5.\tExpand the Networking menu and select Routes.\n\n    ![](images/tekton-route.png)\n\n    The application route is show on the list. Try to click your sample application URL to launch it and you see an error, this is because you are using a default cluster host in the deployment.yaml file which is different from your cluster host name.\n\n6.\tTo fix the error, run the commands below in the Terminal window to get your cluster host name:\n\n    ```\n    export INTERNAL_REG_HOST=`oc get route default-route --template='{{ .spec.host }}' -n openshift-image-registry`\n\n    echo $INTERNAL_REG_HOST | sed 's/default-route-openshift-image-registry.//g'\n    ```\n \n    The commands above provide you your OCP cluster host name. \n7.\tGo back to the Route page and click **Create Route**.\n\n    ![](images/tekton-create-route.png) \n \n8.\tIn the Create Route page, enter the following values and click Create.\n    *\tName: tekton-lab\n    *\tHostname: tekton-lab.&ltyour cluster host name&gt\n    *\tService: tekton1-svc\n    *\tTarget Port: 3000\n\n    Where &ltyour cluster host name&gt is the one you got in the step above.\n\n    ![](images/tekton-route-values.png)\n\n9.\tThe new route is created, click your sample application URL to launch it.\n\n    ![](images/tekton-app-url.png)\n \n    Your sample application page is displayed.\n \n    ![](images/tekton-app-home-page.png)\n### 7.\tSummary\n\nYou have completed the lab and are on your way to developing robust pipelines for CI/CD of your application deployments using containers and OCP.  \n\nIn this lab, you learned how to create the Tekton resources to automate CI/CD for microservices deployed to OpenShift. \n\n*\tPipelineResource\n*\tTask\n*\tPipeline\n*\tPipelineRun\n\nYou learned how to configure a Service Account with proper authorization and roles to be able to push Docker images to an image registry and authenticate to OpenShift and deploy the application via the Tekton Pipeline. \n \nAs a part of IBM Application Modernization solutions in IBM Cloud Pak for Applications, Transformation Advisor and the Accelerator for Teams (with Application Stacks and Integrated Dev/Ops Toolchain and Pipelines) helps users effectively to develop, package, deploy and manage modernized applications on a Kubernetes cluster. \n\nTo learn more about IBM Application Modernization solutions, please visit [Cloud Pak for Applications](https://www.ibm.com/cloud/cloud-pak-for-applications).\n\nCongratulations! You have successfully completed the lab “Using Tekton Pipelines for CI/CD of Microservices to Red Hat OpenShift Container Platform”.\n\n","type":"Mdx","contentDigest":"0789911a660d0f8441956bef297d32d3","owner":"gatsby-plugin-mdx","counter":1723},"frontmatter":{"title":"Using Tekton Pipelines","description":null},"exports":{},"rawBody":"---\ntitle: Using Tekton Pipelines \ndescription: \n---\n\nOne of the features included in the Cloud Pak for Applications is Tekton, a set of Kubernetes custom resource definitions (CRD) as standard constructs for creating Continuous Integration and Continuous Delivery (CI/CD) pipelines. \n\nThe following is a brief introduction to the Tekton CRDs. \n*\tTask: A sequence of commands (steps) that are run in separate containers in a pod\n*\tPipeline: A collection of tasks that are executed in a defined order\n*\tPipelineResource: Inputs (e.g. git repo) and outputs (e.g. image registry) to a pipeline\n*\tTaskRun: Runtime representation of an execution of a task\n*\tPipelineRun: Runtime representation of an execution of a pipeline\n\n![](images/tekton-crds.png)\n\nAs explained above, all objects within a Tekton pipeline are Kubernetes objects. \nPipelines have tasks, which are actually a CRD that runs a container. \nWithin the task you define steps, which are commands that you run inside the container. \nPipelines normally have resources associated with them, which can be accessed by all tasks within that pipeline. \nIt should be noted that tasks can be used within multiple pipelines, so it's good practice to use pipeline resources to define the resources used, such as GitHub repositories or docker hub image definitions.\n\n![](images/tekton-tasks.png)\n\nFor more information about Tekton and IBM Cloud Pak for Applications, please visit Cloud Pak for Applications.\n\t\nIn this lab exercise, you deploy a cloud native application to an OpenShift cluster using the Tekton pipeline.\n\n### 1.\tBusiness Scenario\n\nThis lab covers the following business scenario:\n\nYour development team has created a cloud native NodeJS application and saved the application code in GitHub, now it is your responsibility to deploy the application to a Red Hat OpenShift Cluster Platform (OCP). You deploy a Tekton Pipeline along with Pipeline Resources, and two Task objects. The pipeline pulls the application source code from GitHub and build the Docker image. Once the image is built, the image is pushed to a local Image repository in a OCP cluster. Lastly, the pipeline runs the task that deploys this containerized application to the OpenShift (Kubernetes) runtime.\n\nHere is a diagram of what you are going to build in this lab.\n \n![](images/tekton-pipeline.png)\n\nThere are a few things you need to configure along with the pipeline, such as secrets and a service account. This lab guides you through all the steps, but you should take some time to learn more about the security roles that are associated with your service account which allow the service account user to push images to the OpenShift registry, and execute the pipeline resources.\n \n### 2.\tObjective\n\nThe objectives of this lab are to:\n*\tlearn how to create a pipeline task \n*\tlearn how to build a pipeline\n*\tlearn how to configure the OCP cluster to run the pipeline\n*\tlearn how to run the pipeline to deploy the application the OCP cluster\n\n### 3.\tPrerequisites\nThe following prerequisites must be completed prior to beginning this lab:\n*\tFamiliarity with basic Linux commands\n*\tHave internet access\n*\tHave completed Lab SU0100 of this lab series and have the CP4Apps installed in IBM Red Hat OpenShift Kubernetes Service (OCP) cluster on IBM Cloud.\n\n### 4.\tWhat is Already Completed\n\nThe Workstation VM is pre-configured for you to access and work with the OCP cluster in this lab.\n\nThe login credentials for the Workstation VM are provided in your Reservation Details page (**https://www.ibm.com/demos/my-reservations/**).\n\nThe CLI commands used in this lab are listed in the Commands.txt file located at the **/home/ibmdemo/app-mod-labs/dv0100** directory of the Workstation VM for you to copy and paste these commands to the Terminal window during the lab.\n\n### 5.\tLab Tasks\nDuring this lab, you complete the following tasks:\n*\tClone the Git repository used for this lab and explore the contents\n*\tLogin to OpenShift and create a new project for this lab\n*\tCreate an OpenShift Service Account and its Security Contexts / Roles\n*\tCreate Secret with Login Token for the Service Account\n*\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n*\tCreate Tekton Task\n*\tCreate the Deployment Task\n*\tCreate the Pipeline \n*\tRun the Pipeline\n\n\n### 6.\tExecute Lab Tasks\n#### 6.1 Log in to the Workstation VM and get started \n1.  Launch the VM from your local workstation web browser with the VM URL.\n \n    ![](images/vm-url.png)\n\n2.\tClick **Connect** to access the VM.\n \n    ![](images/vm-connect.png)\n\n3.\tEnter the password you obtained from the Reservation Details page and click **Send Password**.\n\n    ![](images/vm-password.png)\n\n    The VM desktop is displayed.\n\n    ![](images/vm-desktop.png)\n\n    The Workstation Desktop is displayed. You execute all the lab tasks on this VM.\n \n#### 6.2\tClone the Git repository used for this lab and explore the contents\n\n1.\tOpen a terminal window by clicking **Applications**>**Terminal**.\n    \n    ![](images/vm-terminal-link.png)\n\n2.\tClone the tekton-lab GitHub repository to the local VM.\n    \n    a. From the terminal window, run the following commands to clone the repo:\n    \n    ```\n    cd /home/ibmdemo\n\tgit clone https://github.com/wtistang/tekton-lab.git\n\tcd tekton-lab\n    ```\n\t\n    ![](images/clone-git-repo.png)\n    \n    These commands above clone the public repo named tekton-lab to the local directory under /home/ibmdemo/tekton-lab directory. \n\n    b.\tList the directory contents using the “ls -l” command\n        \n    ```\n    ls -l\n\t```\n    \n    ![](images/tekton-lab-ls-l.png)\n\n    You find the following key resources: \n    *\tDockerfile – Used to build the NodeJS Express Application\n    *\tapp.js – The NodeJS Application\n    *\ttekton-pipeline (folder) – YAML files to create the Pipeline resources for this lab\n \n    In the GitHub repo, you find all the YAML files in the tekton-pipeline sub folder. \n\n3.\tEnter commands below to go to the Tekton-pipeline directory and list the contents.\n    ```\n    cd tekton-pipeline\n    ls -l\n    ```\n    \n    ![](images/tekton-pipeline-ls-l.png)\n\n    In the tekton-lab/tekton-pipeline directory, you find all the YAML files needed to create the Tekton pipeline resources to build and deploy a simple NodeJS Express application to OpenShift.\n \n    You find the following key resources: \n    *\tgit-resource.yaml – Creates the Pipeline resource that references the input GitHub repo that contains the source for the application to be built and deployed via the pipeline\n    *\timage-resource.yaml – Creates the Pipeline resource that references the output Docker image registry where the Docker image is pushed via the pipeline \n    *\ttask.yaml – Creates the build and push Tekton tasks\n    *\tpipeline.yaml – Creates the pipeline that invokes the tasks defined \n    *\toc-deploy.yaml – Creates the Tekton deployment Task to deploy the application to OpenShift\n    *\tdeployment.yaml – Invoked by the oc-deployment task to create the OpenShift Deployment, Service and Route for the application \n    *\tpipeline-run.yaml – Runtime execution of the pipeline to build and deploy the app\n\n \n#### 6.4\tLogin to OpenShift and create a new project for this lab\n\n1. From the browser window, click OCP cluster Web Console bookmark to open it with your IBM credentials.\n\n  ![](images/ocp-console-bookmarked.png) \n2.\tIn the OpenShift Web Console page, click the **Action** icon next to your username and select **Copy Login** Command to get the OCP login command.\n\n  ![](images/ocp-copy-login-command.png) \n3.\tIn the next page, click **Display Token** link.\n\n  ![](images/display-token.png) \n4.\tCopy the OCP login command to the clipboard.\n\n  ![](images/copy-token.png) \n5.\tGo back to the Terminal window, right-click to paste the OCP login command window press Enter to log in to the OCP cluster.\n \n  ![](images/run-oc-login-command.png) \n\n6. Create a new project (namespace) as tekton-lab.\n\n    ```\n    oc new-project tekton-lab\n    ```\n\n    You see the message to confirm that the tekton-lab project is created.\n\n    ![](images/tekton-new-project.png)\n\n#### 6.4\tCreate an OpenShift Service Account and its Security Contexts / Roles\n\nIt is a good OpenShift practice to create a service account for your applications. A service account provides an identity for processes that run in a Pod.\n\nIn this step you create a new service account with the name “tekton-sa”. \n\n1. Create a new service account names tekton-sa in the tekton-lab project with command:\n\n    ```\n    oc create serviceaccount tekton-sa -n tekton-lab\n\t``` \n\n    ![](images/tekton-create-sa.png)\n\n2. Add Privileged access to the Service Account required to run pipelines and deploy applications to the OCP cluster.\n\n    ```\n    oc adm policy add-scc-to-user privileged -n tekton-lab -z tekton-sa  \n    ```\n\n    ![](images/tekton-add-policy.png)\n\n    The tekton-sa Service Account needs privileged access because the pipeline creates pods when it is running and it needs this authority to create the pods.\n\n    NOTE: The “-n” and “-z” params on this command are in reference to the namespace and service account name.\n3. Add edit role to the Service Account to allow for deployments to the OCP cluster.\n\n    ```\n    oc adm policy add-role-to-user edit -n tekton-lab -z tekton-sa\n    ```\n\n    ![](images/tekton-add-edit-role.png)\n\n    The tekton-sa Service Account requires the EDIT role so that it has the proper authority to make the deployment. This happens within the deployment task during the pipeline execution. \n4. Add system:image-builder Role to allow the Service Account to push images to the mage registry.\n\n    The pipeline build pods require the system:image-builder role, which allows pushing images to any image stream in the project using the internal Docker registry.\n\n    ```\n    oc adm policy add-role-to-user system:image-builder -n tekton-lab -z tekton-sa\n    ```\n    ![](images/tekton-add-image-builder-role.png)\n\n#### 6.5\tCreate Secret with Login Token for the Service Account\n\nNext, create a new Kubernetes secret with the login token for the tekton-sa Service Account. This is needed by the account for an automated login for the deploy task of the pipeline. \n\nA two steps process is used to create the secret:\n*\tThe first command extracts the token from the “tekton-sa-token” secret and store it in a file (token.txt). \n*\tThe second command creates a new secret using that token. The deploy task uses the token within this secret to login and issue the deploy command during the pipeline.\n\n1. Run the following commands to create the new secret for the service account to login to OpenShift while running the Pipeline. \n\n    a. Get the token from the service account and store it in a file.\n\t\n    ```\n    oc get secret $(oc get secret -n tekton-lab | grep tekton-sa-token | head -1 | awk '{print $1}') -n tekton-lab -o jsonpath=\"{.data.token}\" | base64 -d > token.txt\n    ```\n    ![](images/tekton-get-token.png)\n\n    b. Verify the token was written to the token.txt file\n\n    ```\n    cat token.txt\n    ```\n    ![](images/tekton-show-token.png)\n\n    c. Create a new secret with the token extracted from the service account\n\t\n    ```\n    oc create secret generic tekton-lab-deployer-secret --from-literal=user=sa --from-file=token=token.txt -n tekton-lab\n    ```\n    \n    ![](images/tekton-create-secret.png)\n\n    d. Verify the new secret with command:\n    \n    ```\n    oc describe secret tekton-lab-deployer-secret\n    ```\n    \n    ![](images/tekton-show-secret.png)\n\n#### 6.6\tCreate the Tekton PipelineResources for the Applications Build and Deployment\n\nNext, you define two PipelineResources to be used by the Tekton pipeline:\n*\tgit-resource.yaml creates a Tekton PipelineResource identifying the GitHub repository from which the pipeline pulls its data during a build.\n*\timg-resource.yaml creates a Tekton PipelineResource identifying the image location.  The tag for that image must be changed every time the application is updated, and the pipeline executed. \n\n1. Ensure the Terminal window is in the /home/ibmdemo/tekton-lab/tekton-pipeline directory, where the Pipeline YAML files are located. \n\n    ```\n    cd /home/ibmdemo/tekton-lab/tekton-pipeline\n    ```\n2. Review the contents of git-resource.yaml. \n\n    ```\n    cat git-resource.yaml \n    ```\n\n    As you can see:\n    * The name of the PipelineResource is tekton1-git\n    * The source type is git\n    * The url to the source git repo is defined in the “url” parameter. \n\n     ![](images/tekton-git-resource.png)\n\n3. Review the contents of img-resource.yaml.\n\n    ```\n\tcat img-resource.yaml \n    ```\n    As you can see:\n    * The name of the PipelineResource is tekton1-image\n    * The type is “image”\n    * The url parameter defines the location of the image registry where the built image is pushed during the execution of the pipeline. \n\n     ![](images/tekton-image-resource.png)\n4. Run the following commands to create the PipelineResources using the YAML files\n\n    ```\n\toc create -f git-resource.yaml\n\toc create -f img-resource.yaml\n    ```\n    ![](images/tekton-create-resources.png)\n\n5. List the new PipelineResources \n\n    ```\t\n    oc get pipelineresources \n    ```\n\n    ![](images/tekton-pipelineresources.png)\n\n#### 6.7\tCreate Tekton Task\nYou have created the PipelineResources, which define the input and output for the build and created a Service account with the proper privileges and roles, and credentials to run the pipeline, push images to the image registry, and deploy pods to OpenShift. \n\nIn this task, you create a Tekton task to build the Docker image, and push the image to the OpenShift Image Registry\n\nThe Tekton task you are ready to create contains two steps: \n*\tbuild the Docker image from the source GitHub repo\n*\tpushes the image to the OpenShift image registry\n\nNote: There are different ways to build a Docker image inside a task, for this lab, you use buildah to build your application Docker image (https://buildah.io/).\nBuildah is a command-line tool for building Open Container Initiative-compatible (that means Docker- and Kubernetes-compatible, too) images quickly and easily. It is easy to incorporate into scripts and build pipelines.\n\n1. Review the task.yaml file using cat command. \n\n    ```\n    cat task.yaml\n    ```\n    \n    The Task resource defines its spec as illustrated below:\n    *\tThe input resource\n    *\tThe output resource\n    *\tLocal parameters used during the execution of the task\n    *\tSteps. In this lab, “build” and “push” are described. In general, steps are used to isolate individual commands.\n    *\tThe image used for the task execution. It is quay.io/buildah/stable.\n    *\tIts environment. The env variables are defined, based on configmap and/or secret. Here, a secret is used to define the authentication information.\n    *\tThe commands to execute in the “build” and “push” steps. The first one builds the image, the second pushes it to the target repository. \n\n    ![](images/tekton-cat-tasks.png) \n\n2. You create the Task using the task.yaml file, then list the new “buildah” task. \n\n    ```\n    oc create -f ./task.yaml\n\toc get tasks\n    ```\n    \n    ![](images/tekton-create-tasks.png)\n\n#### 6.8\tCreate the Deployment Task\nTo manage the deployment of this simple NodeJs Express application, tasks are needed to specify a Deployment (controller for pods) and a Service definition in OpenShift. \n\nThe oc-deployment.yaml file defines a Tekton Task that in turn invokes a command to run the deployment.yaml to create the deployment, service and route for the sample application. To enable this action, each task defines with a step using the quay.io/openshift/origin-cli:latest docker image.\n1. Review the oc-deploy.yaml  file using cat command. \n\n    ```\n    cat oc-deploy.yaml\n    ```\n\n    ![](images/tekton-oc-deploy.png)\n\n2. Review the deployment.yaml file that is used to create the Deployment and Service for the application, and is invoked by deploy-cm Task you reviewed in the previous step  \n\n    ```\n    cat deployment.yaml\n\t```\n    \n    In this YAML file:\n    * The Deployment specifies 1 replica (pod), and is deployed using the Docker image that is pushed to the OpenShift image registry. \n    * The Service defines how the application is accessed internally.\n    * The Route defines how the application is be accessed publicly.\n\n    ![](images/tekton-deployment.png)\n\n3. Run the oc-deploy.yaml to create the Tekton Deployment Task. Then list the new task\n    ```\n    oc create -f ./oc-deploy.yaml\n\toc get tasks\n    ```\n\n    ![](images/tekton-create-oc-deploy.png)\n#### 6.9\tCreate the Pipeline \n\nNow that that tasks have been created, they can be incorporated and orchestrated in a Pipeline. In this task, you create the Tekton pipeline which invokes the build/push and deploy Tasks you created.\n\nThe pipeline does the following: \n*\tFirst, the pipeline runs the buildah task that performs the build and push steps \n*\tOnce the build-push task completes, the deploy-cm task is executed to deploy the app to OpenShift\n*\tThe pipeline orchestrates the order of the task execution using the runAfter tag in the pipeline definition. If the build-push task fails, the deploy task does not run. \n\n1.\tReview the pipeline.yaml file  \n\n    ```\n    cat pipeline.yaml\n    ```\n    \n    ![](images/tekton-cat-pipeline.png)\n\n    Snippet showing the tasks in the pipeline.yml file\n \n2.\tUse the pipeline.yaml file to Create the pipeline. Then list the new pipeline \n\n    ```\n\toc create -f ./pipeline.yaml\n    oc get pipelines\n    ```\n\n    ![](images/tekton-create-pipeline.png)\n\n#### 6.10\tRun the Pipeline\n\nTo execute the pipeline, a PipelineRun artefact should be created. You can do it in CLI or in Tekton Dashboard. In this lab, you do it from in the Tekton. The Tekton Dashboard is a general purpose, web-based UI for Tekton Pipelines and Tekton triggers resources. It allows users to manage and view Tekton resource creation, execution, and completion.\n\n1. Access the Tekton Dashboard\n    a. From the Workstation desktop, open a Firefox window by clicking its icon on the Desktop Tool Bar.\n\n    ![](images/vm-browser-link.png)\n\n    b. \tClick on the Tekton Dashboard bookmark of the Firefox browser window.\n\n    ![](images/tekton-bookmark.png)\n\n    The Tekton Dashboard page is displayed.\n\n2. From the Tekton Dashboard, use the Namespace pulldown menu, and select the **tekton-lab** namespace to filter the resources to the namespace used in the lab.\n\n    ![](images/tekton-lab-namespace.png)\n\n3. Click the **PipelineResources** menu option, you can see the two PipelineResources you created in previous step. These resources are needed to run the pipeline. \n\n    ![](images/tekton-pipelineresources.png)\n  \n4. Click the PipelineRuns menu option, and click **Create** to create a new PipelineRun.\n \n    ![](images/tekton-pipelineruns.png)\n     \n    A PipelineRun starts a Pipeline and ties it to the Git and image resources that should be used for the specific invocation. It automatically creates and starts the TaskRuns for each Task in the Pipeline.\n\n5.\tFill in the fields for the PipelineRun as illustrated below:\n\n    *\tNamespace: tekton-lab\n\n    *\tPipeline: tutorial-pipeline \n\n    *\tGit-source: tekton1-git\n\n    *\tDocker-image: tekton1-image\n\n    *\tServiceAccount: tekton-sa\n\n    ![](images/tekton-pipelinerun-values.png)\n\n    ![](images/tekton-pipelinerun-values-2.png)\n\n    ![](images/tekton-pipelinerun-values-3.png)\n\n6.\tClick Create to run the Pipeline\n\n    ![](images/tekton-pipelinerun-create.png)\n\n7.\tThe pipelinerun is started. Click on its name to view the live status of the pipelinerun:\n\n    ![](images/tekton-pipelinerun-list.png)\n\n    In the pipelinerun page, you can see the pipeline is running\n    \n    ![](images/tekton-pipeline-running.png)\n\n8.\tWait for the PipelineRun to complete. The Tekton pipeline takes several minutes to complete. As the Pipeline run, you can view its logs to see the details. \n\n    ![](images/tekton-pipelinerun-logs.png)\n\n\n####\t6.11\tVerify the Deployment\nWhen the pipelinerun has completed successfully, view the running application.\n\n1.\tClick on the OpenShift web console bookmark\n\n    ![](images/tekton-ocp-bookmark.png)\n\n 2.\tExpand the **Workloads** menu and select **Pods**.\n \n    ![](images/tekton-workloads-pods.png)\n\n3.\tChange Project to **tekton-lab** project.\n\n    ![](images/tekton-project-tekton-lab.png)\n \n    You can see your application is in Running status. You can click its link to view the details.\n\n    ![](images/tekton-pod.png)\n\n4.\tExpand the Networking menu and select Services.\n\n    ![](images/tekton-service.png)\n    \n    The application service is listed, click its link to view its details.\n\n5.\tExpand the Networking menu and select Routes.\n\n    ![](images/tekton-route.png)\n\n    The application route is show on the list. Try to click your sample application URL to launch it and you see an error, this is because you are using a default cluster host in the deployment.yaml file which is different from your cluster host name.\n\n6.\tTo fix the error, run the commands below in the Terminal window to get your cluster host name:\n\n    ```\n    export INTERNAL_REG_HOST=`oc get route default-route --template='{{ .spec.host }}' -n openshift-image-registry`\n\n    echo $INTERNAL_REG_HOST | sed 's/default-route-openshift-image-registry.//g'\n    ```\n \n    The commands above provide you your OCP cluster host name. \n7.\tGo back to the Route page and click **Create Route**.\n\n    ![](images/tekton-create-route.png) \n \n8.\tIn the Create Route page, enter the following values and click Create.\n    *\tName: tekton-lab\n    *\tHostname: tekton-lab.&ltyour cluster host name&gt\n    *\tService: tekton1-svc\n    *\tTarget Port: 3000\n\n    Where &ltyour cluster host name&gt is the one you got in the step above.\n\n    ![](images/tekton-route-values.png)\n\n9.\tThe new route is created, click your sample application URL to launch it.\n\n    ![](images/tekton-app-url.png)\n \n    Your sample application page is displayed.\n \n    ![](images/tekton-app-home-page.png)\n### 7.\tSummary\n\nYou have completed the lab and are on your way to developing robust pipelines for CI/CD of your application deployments using containers and OCP.  \n\nIn this lab, you learned how to create the Tekton resources to automate CI/CD for microservices deployed to OpenShift. \n\n*\tPipelineResource\n*\tTask\n*\tPipeline\n*\tPipelineRun\n\nYou learned how to configure a Service Account with proper authorization and roles to be able to push Docker images to an image registry and authenticate to OpenShift and deploy the application via the Tekton Pipeline. \n \nAs a part of IBM Application Modernization solutions in IBM Cloud Pak for Applications, Transformation Advisor and the Accelerator for Teams (with Application Stacks and Integrated Dev/Ops Toolchain and Pipelines) helps users effectively to develop, package, deploy and manage modernized applications on a Kubernetes cluster. \n\nTo learn more about IBM Application Modernization solutions, please visit [Cloud Pak for Applications](https://www.ibm.com/cloud/cloud-pak-for-applications).\n\nCongratulations! You have successfully completed the lab “Using Tekton Pipelines for CI/CD of Microservices to Red Hat OpenShift Container Platform”.\n\n","fileAbsolutePath":"/Users/yitang/Downloads/app-mod/src/pages/labs/devops-labs/dv0100-tekton/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}